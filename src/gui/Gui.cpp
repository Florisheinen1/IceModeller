#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <gtc/matrix_transform.hpp>
#include <mat4x4.hpp>
#include <ctype.h>
#include <stdlib.h>
#include <algorithm>

#include "../import/Shader.h"
#include "../import/stb_image.h"
#include "Gui.h"

static const int DEFAULT_WINDOW_WIDTH = 640;
static const int DEFAULT_WINDOW_HEIGHT = 480;

static const std::string vertexShaderPath = "resources/shaders/guiVertex.vs";
static const std::string fragmentShaderPath = "resources/shaders/guiFragment.fs";

static const unsigned int CHARACTER_OFFSET = 32;
static const char DECIMAL_SEPERATOR = '.';
static const char NEGATIVE_SYMBOL = '-';

static const gui::Boundary screenBoundary = {
	 1.0f,	// Top
	 1.0f,	// Right
	-1.0f,	// Left
	-1.0f	// Bottom
};

static bool guiIsInitialised = false;

// Gui
void gui::Gui::init(int windowWidth, int windowHeight) {
	if (Gui::isInitialised())
		throw AlreadyInitializedException();

	std::cout << "2. Initialising Gui" << std::endl;

	Gui::initialiseGLFW();

	// Set up gui managers
	Gui::focusManager = new FocusManager();
	Gui::keyManager = new KeyManager();
	Gui::mouseManager = new MouseManager();
	Gui::resizeManager = new ResizeManager();

	Gui::mainWindow = new gui::OGLWindow(windowWidth, windowHeight);

	std::cout << "5. Initialising GLAD" << std::endl;

	// Set up GLAD
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		glfwTerminate();
		throw GladLoadingException();
	}

	// Set up openGL stuff like shader, vao and font characters
	Gui::shader = new Shader(vertexShaderPath, fragmentShaderPath);
	Gui::loadQuadVAO();
	Gui::loadAllCharacters();

	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	
	Gui::setInitialised(true);
}
bool gui::Gui::isInitialised() {
	return guiIsInitialised;
}
glm::mat4 gui::Gui::getTransformationMatrix(Boundary boundary) {
	float widthScale = (boundary.right - boundary.left) / (float)2;
	float heightScale = (boundary.top - boundary.bottom) / (float)2;

	float x = boundary.left + 1.0f;
	float y = boundary.top - 1.0f;

	glm::mat4 transformationMatrix = glm::mat4(1.0);

	// Move to position
	transformationMatrix = glm::translate(transformationMatrix, glm::vec3(x, y, 0.0));

	// Scale to size
	transformationMatrix = glm::translate(transformationMatrix, -glm::vec3(1.0, -1.0, 0.0));
	transformationMatrix = glm::scale(transformationMatrix, glm::vec3(widthScale, heightScale, 0.0));
	transformationMatrix = glm::translate(transformationMatrix, glm::vec3(1.0, -1.0, 0.0));

	return transformationMatrix;
}
unsigned int gui::Gui::loadTexture(std::string pathToFile) {
	// TODO test init

	unsigned int textureID;
	glGenTextures(1, &textureID);
	glBindTexture(GL_TEXTURE_2D, textureID);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

	int width, height, numberOfChannels;
	unsigned char* data = stbi_load(pathToFile.c_str(), &width, &height, &numberOfChannels, 0);

	std::cout << "Loading: " << pathToFile << std::endl;

	if (data) {
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
	}
	//glGenerateMipmap(GL_TEXTURE_2D);
	stbi_image_free(data);

	return textureID;
}
gui::Character gui::Gui::getCharacter(char c) {
	int index = ((int) c) - CHARACTER_OFFSET;
	return gui::Gui::characters[index];
}
void gui::Gui::loadQuadVAO() {
	// Setup standard quad vao
	float vertices[] = {
		//	Vertices			Texture coords
			-1.0f, -1.0f,		0.0f, 1.0f,
			 1.0f, -1.0f,		1.0f, 1.0f,
			 1.0f,  1.0f,		1.0f, 0.0f,
			-1.0f,  1.0f,		0.0f, 0.0f
	};

	unsigned int VAO;
	glGenVertexArrays(1, &VAO);
	glBindVertexArray(VAO);

	unsigned int VBO;
	glGenBuffers(1, &VBO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	// Pointer to vertices
	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);

	// Pointer to texture coordinates
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(float), (void*)(2 * sizeof(float)));
	glEnableVertexAttribArray(1);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);

	Gui::quadVAO = VAO;
}
void gui::Gui::initialiseGLFW() {
	std::cout << "3. Initialising GLFW" << std::endl;
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_SAMPLES, 8);
}
void gui::Gui::loadAllCharacters() {
	
	gui::Gui::characters = std::vector<gui::Character>(95);

	// space
	float spaceVertices[] = {
		-1.0f, -1.0f, };
	Gui::characters[0].vao = gui::Gui::loadCharacterVertices(spaceVertices, sizeof(spaceVertices));
	Gui::characters[0].width = 0.13f;

	// exclam
	float exclamVertices[] = {
		// Triangle strip 0
		-0.9107142857142857f, -1.0f,
		0.9107142857142858f, -1.0f,
		-0.9107142857142857f, -0.7423687423687424f,
		0.9107142857142858f, -0.7423687423687424f,
		// Triangle strip 1
		-0.7321428571428572f, -0.4993894993894994f,
		0.75f, -0.4993894993894994f,
		-1.0f, 0.818070818070818f,
		1.0f, 0.818070818070818f,
	};
	Gui::characters[1].vao = gui::Gui::loadCharacterVertices(exclamVertices, sizeof(exclamVertices));
	Gui::characters[1].ranges.push_back({ 0, 4 });
	Gui::characters[1].ranges.push_back({ 4, 4 });
	Gui::characters[1].width = 0.13675213675213677f;

	// quotedbl
	float quotedblVertices[] = {
		// Triangle strip 0
		-0.8552188552188552f, 0.1929181929181929f,
		-0.4107744107744108f, 0.1929181929181929f,
		-1.0f, 0.8998778998778999f,
		-0.265993265993266f, 0.8998778998778999f,
		// Triangle strip 1
		0.4107744107744107f, 0.1929181929181929f,
		0.8552188552188553f, 0.1929181929181929f,
		0.265993265993266f, 0.8998778998778999f,
		1.0f, 0.8998778998778999f,
	};
	Gui::characters[2].vao = gui::Gui::loadCharacterVertices(quotedblVertices, sizeof(quotedblVertices));
	Gui::characters[2].ranges.push_back({ 0, 4 });
	Gui::characters[2].ranges.push_back({ 4, 4 });
	Gui::characters[2].width = 0.3626373626373626f;

	// numbersign
	float numbersignVertices[] = {
		// Triangle strip 0
		-0.7462686567164178f, -1.0f,
		-0.5323383084577115f, -1.0f,
		-0.12935323383084574f, 0.818070818070818f,
		0.08457711442786064f, 0.818070818070818f,
		// Triangle strip 1
		-0.08457711442786064f, -1.0f,
		0.12935323383084585f, -1.0f,
		0.5323383084577114f, 0.818070818070818f,
		0.7462686567164178f, 0.818070818070818f,
		// Triangle strip 2
		-1.0f, -0.485958485958486f,
		-1.0f, -0.3211233211233211f,
		0.8059701492537314f, -0.485958485958486f,
		0.8059701492537314f, -0.3211233211233211f,
		// Triangle strip 3
		-0.8059701492537313f, 0.13797313797313793f,
		-0.8059701492537313f, 0.30280830280830284f,
		1.0f, 0.13797313797313793f,
		1.0f, 0.30280830280830284f,
	};
	Gui::characters[3].vao = gui::Gui::loadCharacterVertices(numbersignVertices, sizeof(numbersignVertices));
	Gui::characters[3].ranges.push_back({ 0, 4 });
	Gui::characters[3].ranges.push_back({ 4, 4 });
	Gui::characters[3].ranges.push_back({ 8, 4 });
	Gui::characters[3].ranges.push_back({ 12, 4 });
	Gui::characters[3].width = 0.7362637362637363f;

	// dollar
	float dollarVertices[] = {
		// Triangle strip 0
		-0.11111111111111116f, -1.440781440781441f,
		0.13725490196078427f, -1.440781440781441f,
		-0.11111111111111116f, 0.9242979242979243f,
		0.13725490196078427f, 0.9242979242979243f,
		// Triangle strip 1
		-1.0f, -0.6495726495726495f,
		-1.0f, -0.8962148962148961f,
		-0.9673202614379085f, -0.6495726495726495f,
		-0.5849673202614378f, -0.9743589743589745f,
		-0.579520697167756f, -0.7667887667887667f,
		-0.11111111111111116f, -1.0048840048840049f,
		-0.11111111111111116f, -0.8241758241758241f,
		0.13725490196078427f, -0.9987789987789988f,
		0.13725490196078427f, -0.8217338217338217f,
		0.7549019607843137f, -0.8443223443223444f,
		0.4738562091503269f, -0.7466422466422467f,
		1.0f, -0.5360195360195361f,
		0.588235294117647f, -0.5677655677655677f,
		0.8376906318082789f, -0.27594627594627585f,
		0.4836601307189543f, -0.39804639804639796f,
		0.3790849673202614f, -0.14041514041514036f,
		0.13725490196078427f, -0.315018315018315f,
		0.13725490196078427f, -0.10744810744810751f,
		-0.11111111111111116f, -0.29670329670329676f,
		-0.11111111111111116f, -0.08913308913308904f,
		-0.3769063180827886f, -0.2588522588522588f,
		-0.4760348583877996f, 0.005494505494505475f,
		-0.8442265795206971f, -0.10744810744810751f,
		-0.5729847494553377f, 0.17338217338217343f,
		-0.9847494553376906f, 0.1416361416361417f,
		-0.44008714596949894f, 0.34493284493284493f,
		-0.7429193899782135f, 0.4432234432234432f,
		-0.11111111111111116f, 0.4163614163614163f,
		-0.11111111111111116f, 0.5921855921855922f,
		0.13725490196078427f, 0.41758241758241754f,
		0.13725490196078427f, 0.5946275946275946f,
		0.528322440087146f, 0.3638583638583639f,
		0.5479302832244008f, 0.5634920634920635f,
		0.8627450980392157f, 0.26129426129426125f,
		0.8954248366013071f, 0.503052503052503f,
		0.8954248366013071f, 0.26129426129426125f,
	};
	Gui::characters[4].vao = gui::Gui::loadCharacterVertices(dollarVertices, sizeof(dollarVertices));
	Gui::characters[4].ranges.push_back({ 0, 4 });
	Gui::characters[4].ranges.push_back({ 4, 36 });
	Gui::characters[4].width = 0.5604395604395604f;

	// percent
	float percentVertices[] = {
		// Triangle strip 0
		-1.0f, 0.3125763125763126f,
		-0.8016713091922005f, 0.3125763125763126f,
		-0.9766016713091922f, 0.540903540903541f,
		-0.7905292479108635f, 0.4847374847374848f,
		-0.8986072423398329f, 0.7191697191697192f,
		-0.7615598885793872f, 0.5934065934065934f,
		-0.7927576601671309f, 0.8107448107448108f,
		-0.7036211699164345f, 0.6654456654456655f,
		-0.6066852367688023f, 0.8522588522588522f,
		-0.6066852367688023f, 0.6898656898656899f,
		-0.44066852367688025f, 0.8205128205128205f,
		-0.5164345403899722f, 0.6691086691086692f,
		-0.3136490250696379f, 0.717948717948718f,
		-0.45181058495821724f, 0.5946275946275946f,
		-0.23676880222841223f, 0.540903540903541f,
		-0.4206128133704735f, 0.46031746031746035f,
		-0.21448467966573814f, 0.3137973137973138f,
		-0.4128133704735376f, 0.3137973137973138f,
		-0.23454038997214488f, 0.09645909645909645f,
		-0.422841225626741f, 0.14774114774114777f,
		-0.31587743732590534f, -0.09401709401709413f,
		-0.45181058495821724f, 0.03296703296703296f,
		-0.43621169916434543f, -0.19169719169719168f,
		-0.5142061281337047f, -0.04151404151404159f,
		-0.6066852367688023f, -0.22588522588522597f,
		-0.6066852367688023f, -0.06349206349206349f,
		-0.7593314763231198f, -0.2002442002442002f,
		-0.7103064066852367f, -0.03663003663003672f,
		-0.8997214484679665f, -0.09157509157509147f,
		-0.7637883008356546f, 0.03296703296703296f,
		-0.9821727019498607f, 0.11111111111111116f,
		-0.7949860724233984f, 0.16971916971916967f,
		-1.0f, 0.3125763125763126f,
		-0.8016713091922005f, 0.3125763125763126f,
		// Triangle strip 1
		-0.5253481894150418f, -1.0f,
		-0.3415041782729805f, -1.0f,
		0.3437325905292479f, 0.818070818070818f,
		0.5275766016713093f, 0.818070818070818f,
		// Triangle strip 2
		0.21448467966573825f, -0.49694749694749696f,
		0.4128133704735375f, -0.49694749694749696f,
		0.23676880222841223f, -0.2722832722832722f,
		0.42172701949860714f, -0.343101343101343f,
		0.31587743732590523f, -0.09035409035409026f,
		0.452924791086351f, -0.21611721611721602f,
		0.43286908077994424f, 0.006105006105006083f,
		0.5064066852367688f, -0.14774114774114766f,
		0.607799442896936f, 0.042735042735042694f,
		0.607799442896936f, -0.11965811965811968f,
		0.7582172701949861f, 0.017094017094017144f,
		0.6980501392757661f, -0.14041514041514036f,
		0.9008356545961003f, -0.09157509157509147f,
		0.7626740947075208f, -0.2148962148962148f,
		0.9799442896935933f, -0.28205128205128216f,
		0.7949860724233984f, -0.3577533577533578f,
		1.0f, -0.49572649572649574f,
		0.8016713091922005f, -0.49572649572649574f,
		0.9754874651810586f, -0.7313797313797314f,
		0.7927576601671309f, -0.6532356532356531f,
		0.8986072423398328f, -0.9023199023199022f,
		0.7626740947075208f, -0.7765567765567765f,
		0.7782729805013928f, -1.0012210012210012f,
		0.6935933147632312f, -0.8547008547008548f,
		0.607799442896936f, -1.0354090354090353f,
		0.607799442896936f, -0.873015873015873f,
		0.43286908077994424f, -1.0f,
		0.5019498607242341f, -0.844932844932845f,
		0.3147632311977715f, -0.901098901098901f,
		0.4506963788300835f, -0.7765567765567765f,
		0.23342618384401104f, -0.7045177045177045f,
		0.4206128133704736f, -0.6434676434676434f,
		0.21448467966573825f, -0.49694749694749696f,
		0.4128133704735375f, -0.49694749694749696f,
	};
	Gui::characters[5].vao = gui::Gui::loadCharacterVertices(percentVertices, sizeof(percentVertices));
	Gui::characters[5].ranges.push_back({ 0, 34 });
	Gui::characters[5].ranges.push_back({ 34, 4 });
	Gui::characters[5].ranges.push_back({ 38, 34 });
	Gui::characters[5].width = 1.095848595848596f;

	// ampersand
	float ampersandVertices[] = {
		// Triangle strip 0
		1.0f, -1.0f,
		0.6284470246734397f, -1.0f,
		0.4818577648766329f, -0.5506715506715507f,
		0.3323657474600872f, -0.73992673992674f,
		0.32220609579100135f, -0.4151404151404152f,
		0.20609579100145137f, -0.6324786324786325f,
		-0.18867924528301883f, 0.026862026862026878f,
		-0.46153846153846156f, -0.057387057387057405f,
		-0.32510885341074025f, 0.1135531135531136f,
		-0.5994194484760522f, 0.02930402930402931f,
		-0.46516690856313503f, 0.2002442002442002f,
		-0.818577648766328f, 0.20390720390720396f,
		-0.5500725689404935f, 0.28083028083028083f,
		-0.8911465892597968f, 0.4346764346764347f,
		-0.5957910014513788f, 0.3620268620268621f,
		-0.8497822931785196f, 0.5952380952380952f,
		-0.6066763425253991f, 0.44566544566544564f,
		-0.741654571843251f, 0.7252747252747253f,
		-0.532656023222061f, 0.6288156288156288f,
		-0.5609579100145138f, 0.8192918192918193f,
		-0.3294629898403484f, 0.702075702075702f,
		-0.3178519593613933f, 0.855921855921856f,
		-0.13860667634252544f, 0.6373626373626373f,
		0.07547169811320753f, 0.7490842490842491f,
		-0.05660377358490565f, 0.45421245421245426f,
		0.22786647314949193f, 0.4786324786324786f,
		-0.06966618287373005f, 0.3516483516483516f,
		0.20972423802612483f, 0.35470085470085466f,
		-0.10885341074020316f, 0.26129426129426125f,
		0.14368650217706813f, 0.23076923076923073f,
		-0.19085631349782295f, 0.17582417582417587f,
		0.0181422351233671f, 0.11843711843711846f,
		-0.32510885341074025f, 0.1135531135531136f,
		-0.18867924528301883f, 0.026862026862026878f,
		-0.5994194484760522f, 0.02930402930402931f,
		-0.46153846153846156f, -0.057387057387057405f,
		-0.741654571843251f, -0.054334554334554364f,
		-0.5341074020319303f, -0.10378510378510386f,
		-0.872278664731495f, -0.16605616605616613f,
		-0.6139332365747461f, -0.18437118437118438f,
		-0.965166908563135f, -0.3137973137973138f,
		-0.6756168359941945f, -0.29609279609279615f,
		-1.0f, -0.5006105006105006f,
		-0.7024673439767779f, -0.442002442002442f,
		-0.809143686502177f, -0.8894993894993894f,
		-0.5798258345428157f, -0.7271062271062272f,
		-0.32510885341074025f, -1.0378510378510377f,
		-0.24818577648766327f, -0.8388278388278387f,
		0.028301886792452935f, -0.9682539682539681f,
		0.002902757619738683f, -0.7893772893772895f,
		0.3323657474600872f, -0.73992673992674f,
		0.20609579100145137f, -0.6324786324786325f,
		0.4818577648766329f, -0.5506715506715507f,
		0.32220609579100135f, -0.4151404151404152f,
		0.5986937590711177f, -0.2716727716727716f,
		0.3468795355587808f, -0.19719169719169716f,
		0.6342525399129173f, -0.0073260073260073f,
		0.35123367198838906f, 0.10989010989010994f,
		0.6342525399129173f, 0.10989010989010994f,
	};
	Gui::characters[6].vao = gui::Gui::loadCharacterVertices(ampersandVertices, sizeof(ampersandVertices));
	Gui::characters[6].ranges.push_back({ 0, 59 });
	Gui::characters[6].width = 0.8412698412698413f;

	// quotesingle
	float quotesingleVertices[] = {
		// Triangle strip 0
		-0.6126126126126126f, 0.1929181929181929f,
		0.6126126126126126f, 0.1929181929181929f,
		-1.0f, 0.8998778998778999f,
		1.0f, 0.8998778998778999f,
	};
	Gui::characters[7].vao = gui::Gui::loadCharacterVertices(quotesingleVertices, sizeof(quotesingleVertices));
	Gui::characters[7].ranges.push_back({ 0, 4 });
	Gui::characters[7].width = 0.13553113553113552f;

	// parenleft
	float parenleftVertices[] = {
		// Triangle strip 0
		1.0f, -1.503052503052503f,
		0.23920265780730898f, -1.503052503052503f,
		1.0f, -1.4908424908424909f,
		-0.2990033222591362f, -1.2307692307692308f,
		0.4883720930232558f, -1.285103785103785f,
		-0.6677740863787376f, -0.9682539682539681f,
		0.03322259136212624f, -1.0134310134310134f,
		-0.9169435215946844f, -0.6630036630036631f,
		-0.29401993355481726f, -0.6837606837606838f,
		-1.0f, -0.3015873015873016f,
		-0.415282392026578f, -0.3015873015873016f,
		-0.9102990033222591f, 0.06593406593406592f,
		-0.2906976744186046f, 0.07936507936507942f,
		-0.6744186046511628f, 0.36019536019536025f,
		0.03322259136212624f, 0.41025641025641024f,
		-0.2724252491694352f, 0.6446886446886446f,
		0.4867109634551494f, 0.681929181929182f,
		0.23920265780730898f, 0.8998778998778999f,
		1.0f, 0.8876678876678876f,
		1.0f, 0.8998778998778999f,
	};
	Gui::characters[8].vao = gui::Gui::loadCharacterVertices(parenleftVertices, sizeof(parenleftVertices));
	Gui::characters[8].ranges.push_back({ 0, 20 });
	Gui::characters[8].width = 0.36752136752136755f;

	// parenright
	float parenrightVertices[] = {
		// Triangle strip 0
		-1.0f, -1.503052503052503f,
		-0.23920265780730898f, -1.503052503052503f,
		-1.0f, -1.4908424908424909f,
		0.2923588039867109f, -1.2344322344322345f,
		-0.48504983388704315f, -1.2838827838827838f,
		0.6710963455149501f, -0.9645909645909645f,
		-0.03322259136212624f, -1.0134310134310134f,
		0.9169435215946844f, -0.6593406593406594f,
		0.29401993355481726f, -0.6807081807081807f,
		1.0f, -0.3015873015873016f,
		0.415282392026578f, -0.3015873015873016f,
		0.8970099667774087f, 0.09523809523809523f,
		0.2923588039867109f, 0.07936507936507942f,
		0.6677740863787376f, 0.3626373626373627f,
		-0.03322259136212624f, 0.41025641025641024f,
		0.21594684385382057f, 0.673992673992674f,
		-0.49169435215946844f, 0.6825396825396826f,
		-0.23920265780730898f, 0.8998778998778999f,
		-1.0f, 0.8876678876678876f,
		-1.0f, 0.8998778998778999f,
	};
	Gui::characters[9].vao = gui::Gui::loadCharacterVertices(parenrightVertices, sizeof(parenrightVertices));
	Gui::characters[9].ranges.push_back({ 0, 20 });
	Gui::characters[9].width = 0.36752136752136755f;

	// asterisk
	float asteriskVertices[] = {
		// Triangle strip 0
		-0.13966480446927376f, -0.23076923076923084f,
		0.13966480446927365f, -0.23076923076923084f,
		-0.13966480446927376f, 0.8998778998778999f,
		0.13966480446927365f, 0.8998778998778999f,
		// Triangle strip 1
		-1.0f, 0.08180708180708185f,
		-0.8525139664804469f, -0.05250305250305254f,
		0.8547486033519553f, 0.7203907203907204f,
		1.0f, 0.5860805860805861f,
		// Triangle strip 2
		-1.0f, 0.5873015873015873f,
		-0.8525139664804469f, 0.7216117216117216f,
		0.8547486033519553f, -0.05128205128205132f,
		1.0f, 0.08302808302808307f,
	};
	Gui::characters[10].vao = gui::Gui::loadCharacterVertices(asteriskVertices, sizeof(asteriskVertices));
	Gui::characters[10].ranges.push_back({ 0, 4 });
	Gui::characters[10].ranges.push_back({ 4, 4 });
	Gui::characters[10].ranges.push_back({ 8, 4 });
	Gui::characters[10].width = 0.5463980463980463f;

	// plus
	float plusVertices[] = {
		// Triangle strip 0
		-0.141156462585034f, -0.9181929181929183f,
		0.14115646258503411f, -0.9181929181929183f,
		-0.141156462585034f, 0.5103785103785103f,
		0.14115646258503411f, 0.5103785103785103f,
		// Triangle strip 1
		-1.0f, -0.3015873015873016f,
		-1.0f, -0.1062271062271063f,
		1.0f, -0.3015873015873016f,
		1.0f, -0.1062271062271063f,
	};
	Gui::characters[11].vao = gui::Gui::loadCharacterVertices(plusVertices, sizeof(plusVertices));
	Gui::characters[11].ranges.push_back({ 0, 4 });
	Gui::characters[11].ranges.push_back({ 4, 4 });
	Gui::characters[11].width = 0.717948717948718f;

	// comma
	float commaVertices[] = {
		// Triangle strip 0
		-1.0f, -1.451770451770452f,
		-0.3145539906103286f, -1.451770451770452f,
		-0.17370892018779338f, -0.6520146520146519f,
		1.0f, -0.6520146520146519f,
	};
	Gui::characters[12].vao = gui::Gui::loadCharacterVertices(commaVertices, sizeof(commaVertices));
	Gui::characters[12].ranges.push_back({ 0, 4 });
	Gui::characters[12].width = 0.2600732600732601f;

	// hyphen
	float hyphenVertices[] = {
		// Triangle strip 0
		-1.0f, -0.315018315018315f,
		-1.0f, -0.09401709401709413f,
		1.0f, -0.315018315018315f,
		1.0f, -0.09401709401709413f,
	};
	Gui::characters[13].vao = gui::Gui::loadCharacterVertices(hyphenVertices, sizeof(hyphenVertices));
	Gui::characters[13].ranges.push_back({ 0, 4 });
	Gui::characters[13].width = 0.3443223443223443f;

	// period
	float periodVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		1.0f, -1.0f,
		-1.0f, -0.6520146520146519f,
		1.0f, -0.6520146520146519f,
	};
	Gui::characters[14].vao = gui::Gui::loadCharacterVertices(periodVertices, sizeof(periodVertices));
	Gui::characters[14].ranges.push_back({ 0, 4 });
	Gui::characters[14].width = 0.14590964590964592f;

	// slash
	float slashVertices[] = {
		// Triangle strip 0
		-1.0f, -1.3956043956043955f,
		-0.550531914893617f, -1.3956043956043955f,
		0.5425531914893618f, 0.8998778998778999f,
		1.0f, 0.8998778998778999f,
	};
	Gui::characters[15].vao = gui::Gui::loadCharacterVertices(slashVertices, sizeof(slashVertices));
	Gui::characters[15].ranges.push_back({ 0, 4 });
	Gui::characters[15].width = 0.4590964590964591f;

	// zero
	float zeroVertices[] = {
		// Triangle strip 0
		-1.0f, -0.09279609279609269f,
		-0.5735294117647058f, -0.09279609279609269f,
		-0.9474789915966386f, 0.3076923076923077f,
		-0.5504201680672269f, 0.22710622710622708f,
		-0.7542016806722689f, 0.6263736263736264f,
		-0.4642857142857143f, 0.46153846153846156f,
		-0.45798319327731096f, 0.7936507936507937f,
		-0.2867647058823529f, 0.6050061050061051f,
		0.0f, 0.8547008547008547f,
		0.0f, 0.6532356532356532f,
		0.4243697478991597f, 0.8034188034188035f,
		0.28676470588235303f, 0.6050061050061051f,
		0.7584033613445378f, 0.6190476190476191f,
		0.4600840336134453f, 0.463980463980464f,
		0.9432773109243697f, 0.31135531135531136f,
		0.5483193277310925f, 0.2344322344322345f,
		1.0f, -0.09035409035409026f,
		0.5735294117647058f, -0.09035409035409026f,
		0.953781512605042f, -0.468864468864469f,
		0.5483193277310925f, -0.41636141636141644f,
		0.7542016806722689f, -0.8095238095238095f,
		0.46218487394957974f, -0.6446886446886446f,
		0.4369747899159664f, -0.982905982905983f,
		0.28676470588235303f, -0.7881562881562882f,
		0.0f, -1.0378510378510377f,
		0.0f, -0.8363858363858363f,
		-0.4642857142857143f, -0.9743589743589745f,
		-0.29306722689075626f, -0.7857142857142858f,
		-0.7584033613445378f, -0.8046398046398047f,
		-0.46638655462184875f, -0.641025641025641f,
		-0.9516806722689075f, -0.4725274725274726f,
		-0.5535714285714286f, -0.41147741147741157f,
		-1.0f, -0.09279609279609269f,
		-0.5735294117647058f, -0.09279609279609269f,
		// Triangle strip 1
		0.28676470588235303f, 0.6050061050061051f,
		0.4600840336134453f, 0.463980463980464f,
		-0.46638655462184875f, -0.641025641025641f,
		-0.29306722689075626f, -0.7857142857142858f,
	};
	Gui::characters[16].vao = gui::Gui::loadCharacterVertices(zeroVertices, sizeof(zeroVertices));
	Gui::characters[16].ranges.push_back({ 0, 34 });
	Gui::characters[16].ranges.push_back({ 34, 4 });
	Gui::characters[16].width = 0.5811965811965812f;

	// one
	float oneVertices[] = {
		// Triangle strip 0
		-1.0f, -0.8144078144078144f,
		-1.0f, -1.0f,
		1.0f, -0.8144078144078144f,
		1.0f, -1.0f,
		// Triangle strip 1
		-0.25619834710743805f, -0.8144078144078144f,
		0.2727272727272727f, -0.8144078144078144f,
		-0.25619834710743805f, 0.40415140415140416f,
		0.2727272727272727f, 0.8241758241758241f,
		-0.15426997245179064f, 0.8241758241758241f,
		-0.20385674931129472f, 0.717948717948718f,
		-0.25619834710743805f, 0.40415140415140416f,
		-0.37741046831955927f, 0.6239316239316239f,
		-0.6584022038567493f, 0.5811965811965811f,
		-0.25619834710743805f, 0.40415140415140416f,
		-1.0f, 0.5702075702075702f,
		-1.0f, 0.40415140415140416f,
	};
	Gui::characters[17].vao = gui::Gui::loadCharacterVertices(oneVertices, sizeof(oneVertices));
	Gui::characters[17].ranges.push_back({ 0, 4 });
	Gui::characters[17].ranges.push_back({ 4, 12 });
	Gui::characters[17].width = 0.4432234432234432f;

	// two
	float twoVertices[] = {
		// Triangle strip 0
		1.0f, -1.0f,
		1.0f, -0.7912087912087913f,
		-1.0f, -1.0f,
		-0.5930359085963004f, -0.7912087912087913f,
		-1.0f, -0.7448107448107448f,
		-0.19151251360174104f, -0.5787545787545787f,
		-0.5930359085963004f, -0.5250305250305249f,
		0.26441784548422187f, -0.3199023199023199f,
		-0.21871599564744282f, -0.3064713064713065f,
		0.5038084874863982f, -0.16605616605616613f,
		0.2861806311207835f, 0.05921855921855923f,
		0.6974972796517955f, -0.008547008547008517f,
		0.4211099020674647f, 0.3431013431013431f,
		0.8204570184983677f, 0.15873015873015872f,
		0.37867247007616966f, 0.47619047619047616f,
		0.8650707290533188f, 0.35531135531135527f,
		0.26224156692056577f, 0.5714285714285714f,
		0.8019586507072904f, 0.5604395604395604f,
		0.08596300326441786f, 0.6263736263736264f,
		0.6082698585418933f, 0.7216117216117216f,
		-0.13384113166485312f, 0.6446886446886446f,
		0.2774755168661589f, 0.8266178266178266f,
		-0.36779107725788907f, 0.6282051282051282f,
		-0.10119695321001088f, 0.855921855921856f,
		-0.5952121871599565f, 0.5873015873015873f,
		-0.5571273122959739f, 0.8199023199023199f,
		-0.9085963003264418f, 0.4871794871794872f,
		-0.9325353645266594f, 0.746031746031746f,
		-0.9325353645266594f, 0.4871794871794872f,
	};
	Gui::characters[18].vao = gui::Gui::loadCharacterVertices(twoVertices, sizeof(twoVertices));
	Gui::characters[18].ranges.push_back({ 0, 29 });
	Gui::characters[18].width = 0.561050061050061f;

	// three
	float threeVertices[] = {
		// Triangle strip 0
		-1.0f, -0.667887667887668f,
		-1.0f, -0.9255189255189256f,
		-0.969060773480663f, -0.667887667887668f,
		-0.5911602209944751f, -1.0048840048840049f,
		-0.5955801104972376f, -0.7753357753357752f,
		-0.10055248618784529f, -1.0378510378510377f,
		-0.1270718232044199f, -0.8266178266178266f,
		0.36132596685082863f, -0.9951159951159951f,
		0.14364640883977908f, -0.8028083028083028f,
		0.7082872928176795f, -0.8693528693528694f,
		0.37016574585635365f, -0.7252747252747254f,
		0.9237569060773481f, -0.6868131868131868f,
		0.5049723756906077f, -0.6068376068376069f,
		1.0f, -0.46031746031746024f,
		0.5513812154696132f, -0.4432234432234432f,
		0.9359116022099447f, -0.25946275946275943f,
		0.4994475138121548f, -0.2808302808302807f,
		0.7701657458563536f, -0.12454212454212454f,
		0.3546961325966851f, -0.18070818070818073f,
		0.5502762430939228f, -0.04517704517704524f,
		0.13480662983425407f, -0.13003663003663002f,
		0.3281767955801105f, -0.0073260073260073f,
		-0.1403314917127072f, -0.11599511599511603f,
		-0.3281767955801105f, -0.11599511599511603f,
		-0.3281767955801105f, 0.08669108669108672f,
		0.3281767955801105f, -0.0073260073260073f,
		-0.18232044198895025f, 0.08669108669108672f,
		0.3281767955801105f, 0.009768009768009733f,
		0.07624309392265194f, 0.10378510378510375f,
		0.7569060773480663f, 0.15384615384615385f,
		0.3016574585635359f, 0.1648351648351648f,
		0.8895027624309393f, 0.27472527472527475f,
		0.44530386740331496f, 0.26251526251526247f,
		0.9359116022099447f, 0.41758241758241754f,
		0.48950276243093915f, 0.391941391941392f,
		0.861878453038674f, 0.6117216117216118f,
		0.44088397790055245f, 0.5097680097680097f,
		0.641988950276243f, 0.7533577533577533f,
		0.31712707182320443f, 0.5885225885225885f,
		0.34033149171270716f, 0.8308913308913308f,
		0.1314917127071824f, 0.6324786324786325f,
		-0.04972375690607733f, 0.855921855921856f,
		-0.08508287292817684f, 0.6446886446886446f,
		-0.5193370165745856f, 0.8211233211233211f,
		-0.5580110497237569f, 0.5873015873015873f,
		-0.9093922651933701f, 0.7435897435897436f,
		-0.8828729281767955f, 0.485958485958486f,
		-0.9093922651933701f, 0.485958485958486f,
	};
	Gui::characters[19].vao = gui::Gui::loadCharacterVertices(threeVertices, sizeof(threeVertices));
	Gui::characters[19].ranges.push_back({ 0, 48 });
	Gui::characters[19].width = 0.5525030525030525f;

	// four
	float fourVertices[] = {
		// Triangle strip 0
		0.2814021421616357f, -1.0f,
		0.6553067185978578f, -1.0f,
		0.296981499513145f, 0.818070818070818f,
		0.6553067185978578f, 0.818070818070818f,
		-1.0f, -0.11843711843711846f,
		-0.6962025316455696f, -0.17948717948717952f,
		-1.0f, -0.37484737484737485f,
		1.0f, -0.17948717948717952f,
		1.0f, -0.37484737484737485f,
	};
	Gui::characters[20].vao = gui::Gui::loadCharacterVertices(fourVertices, sizeof(fourVertices));
	Gui::characters[20].ranges.push_back({ 0, 9 });
	Gui::characters[20].width = 0.626984126984127f;

	// five
	float fiveVertices[] = {
		// Triangle strip 0
		-1.0f, -0.6764346764346765f,
		-1.0f, -0.9340659340659341f,
		-0.9684329199549042f, -0.6764346764346765f,
		-0.5952649379932355f, -1.0091575091575091f,
		-0.6054114994363021f, -0.7728937728937728f,
		-0.12063134160090194f, -1.0378510378510377f,
		-0.11386696730552426f, -0.8266178266178266f,
		0.35174746335963913f, -0.9902319902319903f,
		0.1499436302142052f, -0.7997557997557998f,
		0.7046223224351746f, -0.8595848595848596f,
		0.3709131905298759f, -0.7155067155067154f,
		0.9222096956031567f, -0.6654456654456655f,
		0.49830890642615566f, -0.5897435897435896f,
		1.0f, -0.4212454212454213f,
		0.5422773393461104f, -0.4200244200244201f,
		0.9109357384441938f, -0.15384615384615374f,
		0.4937993235625704f, -0.26129426129426125f,
		0.6550169109357384f, 0.017094017094017144f,
		0.3528748590755355f, -0.15873015873015883f,
		0.3122886133032694f, 0.1074481074481074f,
		0.11499436302142052f, -0.0934065934065933f,
		-0.12288613303269447f, 0.13064713064713063f,
		-0.19954904171364152f, -0.07448107448107444f,
		-0.26719278466741825f, 0.1282051282051282f,
		-0.5670800450958287f, -0.08974358974358965f,
		-0.4272829763246899f, 0.1208791208791209f,
		-0.8624577226606539f, -0.11843711843711846f,
		-0.4272829763246899f, 0.6043956043956045f,
		-0.8624577226606539f, 0.818070818070818f,
		0.9797068771138671f, 0.6043956043956045f,
		0.9797068771138671f, 0.818070818070818f,
	};
	Gui::characters[21].vao = gui::Gui::loadCharacterVertices(fiveVertices, sizeof(fiveVertices));
	Gui::characters[21].ranges.push_back({ 0, 31 });
	Gui::characters[21].width = 0.5415140415140415f;

	// six
	float sixVertices[] = {
		// Triangle strip 0
		0.7329192546583851f, 0.5934065934065934f,
		0.7329192546583851f, 0.8266178266178266f,
		0.7142857142857142f, 0.5934065934065934f,
		0.5755693581780539f, 0.8461538461538461f,
		0.5527950310559007f, 0.626984126984127f,
		0.3830227743271222f, 0.8522588522588522f,
		0.32712215320910976f, 0.6422466422466422f,
		-0.22981366459627328f, 0.7747252747252747f,
		-0.0165631469979296f, 0.6056166056166057f,
		-0.6625258799171843f, 0.5592185592185592f,
		-0.29399585921325055f, 0.48962148962148966f,
		-0.917184265010352f, 0.22588522588522586f,
		-0.4886128364389234f, 0.28937728937728935f,
		-0.979296066252588f, 0.020757020757020794f,
		-0.5755693581780539f, 0.03418803418803418f,
		-1.0f, -0.20146520146520142f,
		-0.5755693581780539f, -0.13919413919413914f,
		-0.9099378881987578f, -0.6086691086691087f,
		-0.5838509316770186f, -0.25396825396825395f,
		-0.660455486542443f, -0.873015873015873f,
		-0.5217391304347826f, -0.5592185592185592f,
		-0.35921325051759834f, -0.9963369963369964f,
		-0.36438923395445133f, -0.7350427350427351f,
		0.020703933747411973f, -1.0378510378510377f,
		-0.1811594202898551f, -0.8156288156288156f,
		0.39958592132505166f, -0.9945054945054945f,
		0.022774327122153215f, -0.8388278388278387f,
		0.7101449275362319f, -0.8669108669108669f,
		0.42546583850931685f, -0.7338217338217339f,
		0.9213250517598344f, -0.6691086691086692f,
		0.5797101449275361f, -0.4200244200244201f,
		1.0f, -0.41025641025641035f,
		0.5300207039337475f, -0.23199023199023205f,
		0.9171842650103519f, -0.13797313797313793f,
		0.3685300207039337f, -0.10256410256410264f,
		0.6645962732919255f, 0.053724053724053755f,
		0.18530020703933747f, -0.05128205128205132f,
		0.38198757763975166f, 0.13980463980463975f,
		-0.024844720496894457f, -0.039072039072039155f,
		0.0662525879917184f, 0.16117216117216115f,
		-0.30641821946169767f, -0.0647130647130647f,
		-0.27329192546583847f, 0.1282051282051282f,
		-0.5755693581780539f, -0.13919413919413914f,
		-0.5755693581780539f, 0.03418803418803418f,
	};
	Gui::characters[22].vao = gui::Gui::loadCharacterVertices(sixVertices, sizeof(sixVertices));
	Gui::characters[22].ranges.push_back({ 0, 44 });
	Gui::characters[22].width = 0.5897435897435898f;

	// seven
	float sevenVertices[] = {
		// Triangle strip 0
		-0.36296296296296293f, -1.0f,
		-0.8137566137566138f, -1.0f,
		1.0f, 0.5457875457875458f,
		0.6296296296296295f, 0.6043956043956045f,
		1.0f, 0.818070818070818f,
		-1.0f, 0.6043956043956045f,
		-1.0f, 0.818070818070818f,
	};
	Gui::characters[23].vao = gui::Gui::loadCharacterVertices(sevenVertices, sizeof(sevenVertices));
	Gui::characters[23].ranges.push_back({ 0, 7 });
	Gui::characters[23].width = 0.5769230769230769f;

	// eight
	float eightVertices[] = {
		// Triangle strip 0
		-0.4804123711340206f, -0.0219780219780219f,
		-0.23298969072164943f, -0.09035409035409026f,
		-0.8680412371134021f, -0.22588522588522597f,
		-0.4948453608247423f, -0.25518925518925517f,
		-1.0f, -0.4981684981684982f,
		-0.5855670103092783f, -0.4798534798534799f,
		-0.934020618556701f, -0.7118437118437118f,
		-0.5422680412371135f, -0.6336996336996337f,
		-0.7360824742268042f, -0.8852258852258852f,
		-0.4185567010309278f, -0.7521367521367521f,
		-0.4164948453608247f, -1.0012210012210012f,
		-0.25773195876288657f, -0.8241758241758241f,
		0.0f, -1.0415140415140414f,
		0.004123711340206171f, -0.8595848595848596f,
		0.41030927835051556f, -0.9987789987789988f,
		0.2247422680412372f, -0.8388278388278387f,
		0.7154639175257731f, -0.884004884004884f,
		0.420618556701031f, -0.768009768009768f,
		0.9257731958762887f, -0.7106227106227105f,
		0.5773195876288659f, -0.5164835164835164f,
		1.0f, -0.4932844932844933f,
		0.5030927835051546f, -0.3382173382173381f,
		0.8618556701030928f, -0.2197802197802199f,
		0.21649484536082464f, -0.20390720390720385f,
		0.45567010309278344f, -0.039072039072039155f,
		0.030927835051546282f, -0.15384615384615374f,
		0.21237113402061847f, 0.02930402930402931f,
		-0.23298969072164943f, -0.09035409035409026f,
		-0.026804123711340222f, 0.08669108669108672f,
		-0.4804123711340206f, -0.0219780219780219f,
		-0.22061855670103092f, 0.14407814407814412f,
		-0.8164948453608247f, 0.148962148962149f,
		-0.43917525773195876f, 0.2564102564102564f,
		-0.9257731958762887f, 0.38095238095238093f,
		-0.51340206185567f, 0.409035409035409f,
		-0.8474226804123711f, 0.5860805860805861f,
		-0.48247422680412366f, 0.5128205128205128f,
		-0.6639175257731958f, 0.7228327228327228f,
		-0.36907216494845363f, 0.6068376068376069f,
		-0.38144329896907214f, 0.8229548229548229f,
		-0.2082474226804124f, 0.6617826617826618f,
		0.0f, 0.8595848595848596f,
		-0.0020618556701030855f, 0.6800976800976801f,
		0.3731958762886598f, 0.8278388278388278f,
		0.19999999999999996f, 0.663003663003663f,
		0.6701030927835052f, 0.728937728937729f,
		0.38144329896907214f, 0.5982905982905983f,
		0.8618556701030928f, 0.5787545787545787f,
		0.4783505154639176f, 0.5164835164835164f,
		0.9237113402061856f, 0.39682539682539686f,
		0.5195876288659793f, 0.3943833943833944f,
		0.8927835051546391f, 0.27472527472527475f,
		0.49896907216494846f, 0.27472527472527475f,
		0.8020618556701031f, 0.15506715506715507f,
		0.45567010309278344f, 0.19658119658119655f,
		0.45567010309278344f, -0.039072039072039155f,
		0.21237113402061847f, 0.02930402930402931f,
	};
	Gui::characters[24].vao = gui::Gui::loadCharacterVertices(eightVertices, sizeof(eightVertices));
	Gui::characters[24].ranges.push_back({ 0, 57 });
	Gui::characters[24].width = 0.5921855921855922f;

	// nine
	float nineVertices[] = {
		// Triangle strip 0
		-0.7329192546583851f, -0.7765567765567765f,
		-0.7329192546583851f, -1.0097680097680097f,
		-0.7122153209109731f, -0.7765567765567765f,
		-0.5590062111801242f, -1.0299145299145298f,
		-0.5507246376811594f, -0.8095238095238095f,
		-0.3830227743271222f, -1.0354090354090353f,
		-0.32712215320910976f, -0.8253968253968254f,
		0.23291925465838514f, -0.9609279609279608f,
		0.0269151138716357f, -0.7875457875457876f,
		0.660455486542443f, -0.7448107448107448f,
		0.31055900621118004f, -0.667887667887668f,
		0.9151138716356109f, -0.40903540903540914f,
		0.5093167701863355f, -0.4444444444444444f,
		0.9813664596273293f, -0.18925518925518925f,
		0.5734989648033126f, -0.21733821733821723f,
		1.0f, 0.01831501831501836f,
		0.5755693581780539f, -0.04395604395604402f,
		0.9120082815734989f, 0.4285714285714286f,
		0.5838509316770186f, 0.07081807081807079f,
		0.6645962732919255f, 0.6910866910866911f,
		0.525879917184265f, 0.3724053724053724f,
		0.36542443064182195f, 0.8125763125763126f,
		0.36645962732919246f, 0.5531135531135531f,
		-0.020703933747411973f, 0.8547008547008547f,
		0.18219461697722572f, 0.6336996336996337f,
		-0.3964803312629399f, 0.8095238095238095f,
		-0.022774327122153215f, 0.6556776556776557f,
		-0.7101449275362319f, 0.6837606837606838f,
		-0.4285714285714286f, 0.5482295482295483f,
		-0.922360248447205f, 0.48351648351648346f,
		-0.5424430641821947f, 0.4139194139194139f,
		-1.0f, 0.22710622710622708f,
		-0.5797101449275363f, 0.23687423687423692f,
		-0.9151138716356108f, -0.04822954822954828f,
		-0.5300207039337475f, 0.04761904761904767f,
		-0.6645962732919255f, -0.23687423687423692f,
		-0.3685300207039337f, -0.08058608058608052f,
		-0.38095238095238093f, -0.3223443223443223f,
		-0.19047619047619047f, -0.13125763125763124f,
		-0.06832298136645965f, -0.34432234432234443f,
		0.022774327122153215f, -0.144078144078144f,
		0.2577639751552796f, -0.3137973137973138f,
		0.308488612836439f, -0.11660561660561664f,
		0.5734989648033126f, -0.21733821733821723f,
		0.5755693581780539f, -0.04395604395604402f,
	};
	Gui::characters[25].vao = gui::Gui::loadCharacterVertices(nineVertices, sizeof(nineVertices));
	Gui::characters[25].ranges.push_back({ 0, 45 });
	Gui::characters[25].width = 0.5897435897435898f;

	// colon
	float colonVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		1.0f, -1.0f,
		-1.0f, -0.6520146520146519f,
		1.0f, -0.6520146520146519f,
		// Triangle strip 1
		-1.0f, 0.015873015873015928f,
		1.0f, 0.015873015873015928f,
		-1.0f, 0.3638583638583639f,
		1.0f, 0.3638583638583639f,
	};
	Gui::characters[26].vao = gui::Gui::loadCharacterVertices(colonVertices, sizeof(colonVertices));
	Gui::characters[26].ranges.push_back({ 0, 4 });
	Gui::characters[26].ranges.push_back({ 4, 4 });
	Gui::characters[26].width = 0.14590964590964592f;

	// semicolon
	float semicolonVertices[] = {
		// Triangle strip 0
		-1.0f, -1.451770451770452f,
		-0.3145539906103286f, -1.451770451770452f,
		-0.17370892018779338f, -0.6520146520146519f,
		1.0f, -0.6520146520146519f,
		// Triangle strip 1
		-0.431924882629108f, 0.015873015873015928f,
		0.6901408450704225f, 0.015873015873015928f,
		-0.431924882629108f, 0.3638583638583639f,
		0.6901408450704225f, 0.3638583638583639f,
	};
	Gui::characters[27].vao = gui::Gui::loadCharacterVertices(semicolonVertices, sizeof(semicolonVertices));
	Gui::characters[27].ranges.push_back({ 0, 4 });
	Gui::characters[27].ranges.push_back({ 4, 4 });
	Gui::characters[27].width = 0.2600732600732601f;

	// less
	float lessVertices[] = {
		// Triangle strip 0
		1.0f, -0.9035409035409034f,
		1.0f, -0.6862026862026862f,
		-1.0f, -0.27716727716727707f,
		-0.5512104283054003f, -0.20390720390720385f,
		-1.0f, -0.13064713064713063f,
		1.0f, 0.2783882783882784f,
		1.0f, 0.49572649572649574f,
	};
	Gui::characters[28].vao = gui::Gui::loadCharacterVertices(lessVertices, sizeof(lessVertices));
	Gui::characters[28].ranges.push_back({ 0, 7 });
	Gui::characters[28].width = 0.6556776556776557f;

	// equal
	float equalVertices[] = {
		// Triangle strip 0
		-1.0f, -0.557997557997558f,
		-1.0f, -0.3626373626373627f,
		1.0f, -0.557997557997558f,
		1.0f, -0.3626373626373627f,
		// Triangle strip 1
		-1.0f, -0.04517704517704524f,
		-1.0f, 0.1501831501831502f,
		1.0f, -0.04517704517704524f,
		1.0f, 0.1501831501831502f,
	};
	Gui::characters[29].vao = gui::Gui::loadCharacterVertices(equalVertices, sizeof(equalVertices));
	Gui::characters[29].ranges.push_back({ 0, 4 });
	Gui::characters[29].ranges.push_back({ 4, 4 });
	Gui::characters[29].width = 0.6752136752136753f;

	// greater
	float greaterVertices[] = {
		// Triangle strip 0
		-1.0f, -0.9035409035409034f,
		-1.0f, -0.6862026862026862f,
		1.0f, -0.27716727716727707f,
		0.5512104283054005f, -0.20390720390720385f,
		1.0f, -0.13064713064713063f,
		-1.0f, 0.2783882783882784f,
		-1.0f, 0.49572649572649574f,
	};
	Gui::characters[30].vao = gui::Gui::loadCharacterVertices(greaterVertices, sizeof(greaterVertices));
	Gui::characters[30].ranges.push_back({ 0, 7 });
	Gui::characters[30].width = 0.6556776556776557f;

	// question
	float questionVertices[] = {
		// Triangle strip 0
		-0.4296388542963886f, -1.0f,
		0.078455790784558f, -1.0f,
		-0.4296388542963886f, -0.7423687423687424f,
		0.078455790784558f, -0.7423687423687424f,
		// Triangle strip 1
		-0.4072229140722291f, -0.5115995115995116f,
		0.038605230386052236f, -0.5115995115995116f,
		-0.4072229140722291f, -0.13919413919413914f,
		0.038605230386052236f, -0.23321123321123327f,
		-0.0821917808219178f, -0.039682539682539764f,
		0.3985056039850561f, -0.11721611721611724f,
		0.20797011207970106f, 0.06837606837606836f,
		0.7036114570361145f, 0.013431013431013383f,
		0.41718555417185543f, 0.20451770451770457f,
		0.9190535491905354f, 0.1776556776556777f,
		0.4919053549190535f, 0.3724053724053724f,
		1.0f, 0.3907203907203908f,
		0.44956413449564137f, 0.4908424908424909f,
		0.9227895392278953f, 0.5824175824175823f,
		0.31506849315068486f, 0.5775335775335775f,
		0.7061021170610211f, 0.7264957264957265f,
		0.1083437110834371f, 0.6288156288156288f,
		0.33250311332503113f, 0.8266178266178266f,
		-0.14570361145703614f, 0.6459096459096458f,
		-0.09838107098381066f, 0.8547008547008547f,
		-0.6151930261519303f, 0.6050061050061051f,
		-0.5790784557907845f, 0.8284493284493284f,
		-0.9726027397260274f, 0.5201465201465201f,
		-1.0f, 0.7692307692307692f,
		-1.0f, 0.5201465201465201f,
	};
	Gui::characters[31].vao = gui::Gui::loadCharacterVertices(questionVertices, sizeof(questionVertices));
	Gui::characters[31].ranges.push_back({ 0, 4 });
	Gui::characters[31].ranges.push_back({ 4, 25 });
	Gui::characters[31].width = 0.4902319902319902f;

	// at
	float atVertices[] = {
		// Triangle strip 0
		0.4424393279402614f, -1.0586080586080584f,
		0.4424393279402614f, -1.231990231990232f,
		0.2314872433105164f, -1.1013431013431014f,
		0.23024268823895455f, -1.2661782661782661f,
		0.019290603609209755f, -1.1147741147741148f,
		0.018046048537647685f, -1.2759462759462759f,
		-0.36403235843186066f, -1.0329670329670328f,
		-0.4200373366521468f, -1.1868131868131866f,
		-0.5892968263845675f, -0.8656898656898657f,
		-0.7112632233976354f, -0.9792429792429793f,
		-0.7672682016179215f, -0.568986568986569f,
		-0.9303049159925326f, -0.6312576312576312f,
		-0.822028624766646f, -0.21245421245421237f,
		-1.0f, -0.21001221001220993f,
		-0.7598008711885501f, 0.1416361416361417f,
		-0.926571250777847f, 0.2002442002442002f,
		-0.581829495955196f, 0.42612942612942617f,
		-0.70130678282514f, 0.5457875457875458f,
		-0.3192283758556316f, 0.6190476190476191f,
		-0.3901680149346609f, 0.768009768009768f,
		0.025513378967019218f, 0.6886446886446886f,
		0.02426882389545737f, 0.8534798534798534f,
		0.35283136278780347f, 0.6336996336996337f,
		0.41630367143746105f, 0.7875457875457875f,
		0.6204107031736155f, 0.44566544566544564f,
		0.7411325451151214f, 0.5628815628815629f,
		0.7784691972619788f, 0.1562881562881563f,
		0.9415059116365898f, 0.21123321123321126f,
		0.8282514001244554f, -0.19780219780219777f,
		1.0f, -0.19047619047619047f,
		0.8077162414436838f, -0.44810744810744807f,
		0.9527069072806471f, -0.5183150183150182f,
		0.7398879900435593f, -0.6727716727716728f,
		0.8170504044803983f, -0.8083028083028083f,
		0.45737398879900426f, -0.6727716727716728f,
		0.29309271935283143f, -0.8083028083028083f,
		0.45737398879900426f, 0.35531135531135527f,
		0.26197884256378345f, -0.6666666666666667f,
		0.25948973242065954f, 0.35531135531135527f,
		// Triangle strip 1
		0.25948973242065954f, 0.29670329670329665f,
		0.25700062227753584f, 0.13064713064713063f,
		0.12881144990665838f, 0.35531135531135527f,
		0.12881144990665838f, 0.18131868131868134f,
		-0.02551337896701933f, 0.3772893772893773f,
		0.0068450528935906085f, 0.19658119658119655f,
		-0.2308649657747356f, 0.32600732600732596f,
		-0.133789670192906f, 0.1636141636141636f,
		-0.3677660236465463f, 0.21733821733821734f,
		-0.2196639701306783f, 0.09401709401709402f,
		-0.4835096453018046f, 0.01831501831501836f,
		-0.28686994399502175f, -0.04761904761904767f,
		-0.5183571873055383f, -0.22954822954822962f,
		-0.3055382700684506f, -0.22588522588522597f,
		-0.48848786558805224f, -0.4798534798534799f,
		-0.2943372744243933f, -0.37362637362637363f,
		-0.3963907902924705f, -0.667887667887668f,
		-0.24082140634723082f, -0.5250305250305249f,
		-0.2794026135656503f, -0.7692307692307692f,
		-0.16739265712507778f, -0.5970695970695972f,
		-0.08276291225886745f, -0.818070818070818f,
		-0.03422526446795271f, -0.6288156288156288f,
		0.10827629122588678f, -0.7771672771672771f,
		0.11574362165525831f, -0.5934065934065933f,
		0.26197884256378345f, -0.6666666666666667f,
		0.25700062227753584f, -0.5018315018315018f,
	};
	Gui::characters[32].vao = gui::Gui::loadCharacterVertices(atVertices, sizeof(atVertices));
	Gui::characters[32].ranges.push_back({ 0, 39 });
	Gui::characters[32].ranges.push_back({ 39, 26 });
	Gui::characters[32].width = 0.981074481074481f;

	// aCap
	float aCapVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.6794871794871795f, -1.0f,
		-0.19551282051282048f, 0.818070818070818f,
		-0.008012820512820484f, 0.5714285714285714f,
		0.19551282051282048f, 0.818070818070818f,
		0.6650641025641026f, -1.0f,
		1.0f, -1.0f,
		// Triangle strip 1
		-0.375f, -0.2857142857142858f,
		-0.46314102564102566f, -0.4920634920634921f,
		0.36057692307692313f, -0.2857142857142858f,
		0.4487179487179487f, -0.4920634920634921f,
	};
	Gui::characters[33].vao = gui::Gui::loadCharacterVertices(aCapVertices, sizeof(aCapVertices));
	Gui::characters[33].ranges.push_back({ 0, 7 });
	Gui::characters[33].ranges.push_back({ 7, 4 });
	Gui::characters[33].width = 0.7619047619047619f;

	// bCap
	float bCapVertices[] = {
		// Triangle strip 0
		-0.6079207920792079f, -0.12210012210012211f,
		-0.6079207920792079f, 0.07936507936507942f,
		-0.1623762376237624f, -0.12210012210012211f,
		-0.1623762376237624f, 0.07936507936507942f,
		0.1504950495049504f, -0.13064713064713063f,
		0.10891089108910901f, 0.09157509157509158f,
		0.4475247524752475f, 0.019536019536019578f,
		0.28910891089108914f, 0.13919413919413914f,
		0.6217821782178219f, 0.08913308913308915f,
		0.41584158415841577f, 0.23199023199023194f,
		0.7524752475247525f, 0.1782661782661783f,
		0.4534653465346534f, 0.37362637362637363f,
		0.8613861386138615f, 0.4078144078144078f,
		0.41782178217821775f, 0.4871794871794872f,
		0.7881188118811882f, 0.6068376068376069f,
		0.302970297029703f, 0.5641025641025641f,
		0.5564356435643565f, 0.7448107448107448f,
		0.09108910891089117f, 0.6043956043956045f,
		0.25346534653465347f, 0.8046398046398047f,
		-0.23168316831683167f, 0.6117216117216118f,
		-0.2178217821782178f, 0.818070818070818f,
		-0.6079207920792079f, 0.6117216117216118f,
		-1.0f, 0.818070818070818f,
		-0.6079207920792079f, -0.7936507936507937f,
		-1.0f, -1.0f,
		-0.28910891089108914f, -0.7936507936507937f,
		-0.15445544554455448f, -1.0f,
		0.11683168316831694f, -0.7789987789987789f,
		0.3366336633663367f, -0.9658119658119657f,
		0.3782178217821781f, -0.7167277167277166f,
		0.693069306930693f, -0.8522588522588523f,
		0.5405940594059406f, -0.6092796092796093f,
		0.9168316831683168f, -0.6813186813186813f,
		0.5920792079207922f, -0.4517704517704517f,
		1.0f, -0.442002442002442f,
		0.5445544554455446f, -0.28205128205128216f,
		0.8554455445544555f, -0.1501831501831501f,
		0.35247524752475257f, -0.16971916971916978f,
		0.6772277227722772f, -0.05128205128205132f,
		0.1504950495049504f, -0.13064713064713063f,
		0.4475247524752475f, 0.009768009768009733f,
		0.4475247524752475f, 0.019536019536019578f,
	};
	Gui::characters[34].vao = gui::Gui::loadCharacterVertices(bCapVertices, sizeof(bCapVertices));
	Gui::characters[34].ranges.push_back({ 0, 42 });
	Gui::characters[34].width = 0.6166056166056166f;

	// cCap
	float cCapVertices[] = {
		// Triangle strip 0
		1.0f, -0.5885225885225884f,
		1.0f, -0.8766788766788767f,
		0.9734513274336283f, -0.5885225885225884f,
		0.836283185840708f, -0.9304029304029304f,
		0.8619469026548672f, -0.6562881562881564f,
		0.6495575221238938f, -0.9804639804639805f,
		0.6938053097345134f, -0.7338217338217339f,
		0.4362831858407079f, -1.0195360195360195f,
		0.463716814159292f, -0.7985347985347986f,
		0.1805309734513274f, -1.0329670329670328f,
		0.18230088495575214f, -0.8241758241758241f,
		-0.2946902654867256f, -0.9731379731379732f,
		-0.1327433628318584f, -0.7783882783882783f,
		-0.6690265486725664f, -0.7948717948717949f,
		-0.3911504424778761f, -0.6422466422466422f,
		-0.9132743362831859f, -0.4993894993894994f,
		-0.5699115044247788f, -0.4145299145299146f,
		-1.0f, -0.09279609279609269f,
		-0.6353982300884955f, -0.09279609279609269f,
		-0.915929203539823f, 0.3052503052503053f,
		-0.5734513274336284f, 0.22344322344322343f,
		-0.6707964601769911f, 0.6007326007326007f,
		-0.4f, 0.4566544566544567f,
		-0.2973451327433628f, 0.7869352869352869f,
		-0.13628318584070798f, 0.5970695970695971f,
		0.18584070796460184f, 0.851037851037851f,
		0.18230088495575214f, 0.6446886446886446f,
		0.4345132743362832f, 0.8376068376068376f,
		0.45663716814159283f, 0.6202686202686203f,
		0.6495575221238938f, 0.8034188034188035f,
		0.6761061946902656f, 0.557997557997558f,
		0.8238938053097344f, 0.7576312576312576f,
		0.8530973451327433f, 0.47619047619047616f,
		1.0f, 0.6971916971916972f,
		0.9716814159292035f, 0.4053724053724054f,
		1.0f, 0.4053724053724054f,
	};
	Gui::characters[35].vao = gui::Gui::loadCharacterVertices(cCapVertices, sizeof(cCapVertices));
	Gui::characters[35].ranges.push_back({ 0, 36 });
	Gui::characters[35].width = 0.6898656898656899f;

	// dCap
	float dCapVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.6626916524701874f, -0.7924297924297925f,
		-0.41567291311754684f, -1.0f,
		-0.40545144804088584f, -0.7924297924297925f,
		0.09114139693356038f, -0.9706959706959708f,
		-0.011925042589437829f, -0.7667887667887667f,
		0.4821124361158433f, -0.8547008547008548f,
		0.29642248722316866f, -0.6715506715506716f,
		0.8594548551959114f, -0.5421245421245422f,
		0.5604770017035776f, -0.4438339438339438f,
		1.0f, -0.09279609279609269f,
		0.6490630323679727f, -0.08913308913308904f,
		0.8654173764906303f, 0.3656898656898657f,
		0.5519591141396933f, 0.2692307692307693f,
		0.485519591141397f, 0.673992673992674f,
		0.26405451448040895f, 0.5006105006105006f,
		0.1388415672913117f, 0.7796092796092796f,
		-0.023850085178875657f, 0.5848595848595848f,
		-0.42248722316865417f, 0.818070818070818f,
		-0.40545144804088584f, 0.6105006105006106f,
		-1.0f, 0.818070818070818f,
		-0.6626916524701874f, 0.6105006105006106f,
		-1.0f, -1.0f,
		-0.6626916524701874f, -0.7924297924297925f,
	};
	Gui::characters[36].vao = gui::Gui::loadCharacterVertices(dCapVertices, sizeof(dCapVertices));
	Gui::characters[36].ranges.push_back({ 0, 24 });
	Gui::characters[36].width = 0.7167277167277167f;

	// eCap
	float eCapVertices[] = {
		// Triangle strip 0
		1.0f, -0.7851037851037852f,
		1.0f, -1.0f,
		-0.5746509129967776f, -0.7851037851037852f,
		-1.0f, -1.0f,
		-0.5746509129967776f, 0.6031746031746033f,
		-1.0f, 0.818070818070818f,
		1.0f, 0.6031746031746033f,
		1.0f, 0.818070818070818f,
		// Triangle strip 1
		-0.5746509129967776f, 0.10500610500610497f,
		-0.5746509129967776f, -0.10989010989010994f,
		0.8925886143931256f, 0.10500610500610497f,
		0.8925886143931256f, -0.10989010989010994f,
	};
	Gui::characters[37].vao = gui::Gui::loadCharacterVertices(eCapVertices, sizeof(eCapVertices));
	Gui::characters[37].ranges.push_back({ 0, 8 });
	Gui::characters[37].ranges.push_back({ 8, 4 });
	Gui::characters[37].width = 0.5683760683760684f;

	// fCap
	float fCapVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.5555555555555556f, -1.0f,
		-1.0f, 0.818070818070818f,
		-0.5555555555555556f, 0.6031746031746033f,
		1.0f, 0.818070818070818f,
		1.0f, 0.6031746031746033f,
		// Triangle strip 1
		-0.5555555555555556f, 0.09035409035409037f,
		-0.5555555555555556f, -0.12454212454212454f,
		0.9349046015712683f, 0.09035409035409037f,
		0.9349046015712683f, -0.12454212454212454f,
	};
	Gui::characters[38].vao = gui::Gui::loadCharacterVertices(fCapVertices, sizeof(fCapVertices));
	Gui::characters[38].ranges.push_back({ 0, 6 });
	Gui::characters[38].ranges.push_back({ 6, 4 });
	Gui::characters[38].width = 0.5439560439560439f;

	// gCap
	float gCapVertices[] = {
		// Triangle strip 0
		0.10224438902743138f, -0.08547008547008539f,
		0.10224438902743138f, -0.297924297924298f,
		1.0f, -0.08547008547008539f,
		0.6741479634247713f, -0.297924297924298f,
		1.0f, -0.8791208791208791f,
		0.6741479634247713f, -0.768009768009768f,
		0.8320864505403158f, -0.9316239316239316f,
		0.4413965087281795f, -0.811965811965812f,
		0.6342477140482128f, -0.9816849816849818f,
		0.16375727348295932f, -0.8266178266178266f,
		0.4147963424771406f, -1.021978021978022f,
		-0.1753948462177889f, -0.7777777777777777f,
		0.17705735660847877f, -1.0354090354090353f,
		-0.4314214463840399f, -0.6336996336996337f,
		-0.3034081463009144f, -0.9768009768009769f,
		-0.599334995843724f, -0.4017094017094016f,
		-0.6774729842061513f, -0.7985347985347986f,
		-0.6575228595178719f, -0.08180708180708174f,
		-0.9168744804655029f, -0.4993894993894994f,
		-0.6076475477971737f, 0.2002442002442002f,
		-1.0f, -0.08913308913308904f,
		-0.4380714879467996f, 0.4444444444444444f,
		-0.9168744804655029f, 0.30402930402930406f,
		-0.17206982543640903f, 0.5958485958485958f,
		-0.6758104738154613f, 0.601953601953602f,
		0.14048212801330018f, 0.6422466422466422f,
		-0.3034081463009144f, 0.7863247863247863f,
		0.4197838736492103f, 0.6178266178266179f,
		0.18038237738985874f, 0.851037851037851f,
		0.6492103075644222f, 0.5567765567765568f,
		0.4197838736492103f, 0.8376068376068376f,
		0.8354114713216958f, 0.4798534798534798f,
		0.6392352452202825f, 0.800976800976801f,
		0.9617622610141314f, 0.40293040293040294f,
		0.8254364089775561f, 0.7509157509157509f,
		0.9900249376558603f, 0.40293040293040294f,
		0.9900249376558603f, 0.6947496947496947f,
	};
	Gui::characters[39].vao = gui::Gui::loadCharacterVertices(gCapVertices, sizeof(gCapVertices));
	Gui::characters[39].ranges.push_back({ 0, 37 });
	Gui::characters[39].width = 0.7344322344322345f;

	// hCap
	float hCapVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.633672525439408f, -1.0f,
		-1.0f, 0.818070818070818f,
		-0.633672525439408f, 0.818070818070818f,
		// Triangle strip 1
		-0.633672525439408f, -0.10989010989010994f,
		-0.633672525439408f, 0.10500610500610497f,
		0.633672525439408f, -0.10989010989010994f,
		0.633672525439408f, 0.10500610500610497f,
		// Triangle strip 2
		0.633672525439408f, 0.818070818070818f,
		0.633672525439408f, -1.0f,
		1.0f, 0.818070818070818f,
		1.0f, -1.0f,
	};
	Gui::characters[40].vao = gui::Gui::loadCharacterVertices(hCapVertices, sizeof(hCapVertices));
	Gui::characters[40].ranges.push_back({ 0, 4 });
	Gui::characters[40].ranges.push_back({ 4, 4 });
	Gui::characters[40].ranges.push_back({ 8, 4 });
	Gui::characters[40].width = 0.6599511599511599f;

	// iCap
	float iCapVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-1.0f, -0.8144078144078144f,
		1.0f, -1.0f,
		1.0f, -0.8144078144078144f,
		// Triangle strip 1
		-0.342560553633218f, -0.8144078144078144f,
		0.3425605536332179f, -0.8144078144078144f,
		-0.342560553633218f, 0.6324786324786325f,
		0.3425605536332179f, 0.6324786324786325f,
		// Triangle strip 2
		-1.0f, 0.818070818070818f,
		-1.0f, 0.6324786324786325f,
		1.0f, 0.818070818070818f,
		1.0f, 0.6324786324786325f,
	};
	Gui::characters[41].vao = gui::Gui::loadCharacterVertices(iCapVertices, sizeof(iCapVertices));
	Gui::characters[41].ranges.push_back({ 0, 4 });
	Gui::characters[41].ranges.push_back({ 4, 4 });
	Gui::characters[41].ranges.push_back({ 8, 4 });
	Gui::characters[41].width = 0.3528693528693529f;

	// jCap
	float jCapVertices[] = {
		// Triangle strip 0
		-1.0f, -0.7594627594627594f,
		-1.0f, -0.9902319902319903f,
		-0.968705547652916f, -0.7594627594627594f,
		-0.6173541963015647f, -1.0152625152625152f,
		-0.6799431009957326f, -0.7973137973137974f,
		-0.25177809388335703f, -1.0256410256410255f,
		-0.3285917496443812f, -0.818070818070818f,
		0.25177809388335715f, -0.9951159951159951f,
		0.08819345661450928f, -0.7924297924297925f,
		0.658605974395448f, -0.8962148962148961f,
		0.3172119487908962f, -0.7191697191697193f,
		0.9174964438122333f, -0.7374847374847375f,
		0.4153627311522048f, -0.5995115995115996f,
		1.0f, -0.5274725274725274f,
		0.43669985775248943f, -0.4358974358974359f,
		1.0f, 0.818070818070818f,
		0.43669985775248943f, 0.6251526251526252f,
		-0.45945945945945943f, 0.818070818070818f,
		-0.45945945945945943f, 0.6251526251526252f,
	};
	Gui::characters[42].vao = gui::Gui::loadCharacterVertices(jCapVertices, sizeof(jCapVertices));
	Gui::characters[42].ranges.push_back({ 0, 19 });
	Gui::characters[42].width = 0.42918192918192916f;

	// kCap
	float kCapVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.6350230414746544f, -1.0f,
		-1.0f, 0.818070818070818f,
		-0.6350230414746544f, 0.818070818070818f,
		// Triangle strip 1
		-0.6350230414746544f, -0.2735042735042734f,
		-0.6350230414746544f, -0.01831501831501825f,
		-0.20184331797235022f, 0.006105006105006083f,
		0.4894009216589861f, 0.818070818070818f,
		0.9336405529953917f, 0.818070818070818f,
		// Triangle strip 2
		-0.4746543778801844f, -0.15384615384615374f,
		0.5262672811059907f, -1.0f,
		-0.20184331797235022f, 0.006105006105006083f,
		1.0f, -1.0f,
	};
	Gui::characters[43].vao = gui::Gui::loadCharacterVertices(kCapVertices, sizeof(kCapVertices));
	Gui::characters[43].ranges.push_back({ 0, 4 });
	Gui::characters[43].ranges.push_back({ 4, 5 });
	Gui::characters[43].ranges.push_back({ 9, 4 });
	Gui::characters[43].width = 0.6623931623931624f;

	// lCap
	float lCapVertices[] = {
		// Triangle strip 0
		-1.0f, 0.818070818070818f,
		-0.541135573580533f, 0.818070818070818f,
		-1.0f, -1.0f,
		-0.541135573580533f, -0.7851037851037852f,
		1.0f, -1.0f,
		1.0f, -0.7851037851037852f,
	};
	Gui::characters[44].vao = gui::Gui::loadCharacterVertices(lCapVertices, sizeof(lCapVertices));
	Gui::characters[44].ranges.push_back({ 0, 6 });
	Gui::characters[44].width = 0.5268620268620269f;

	// mCap
	float mCapVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.7100313479623824f, -1.0f,
		-1.0f, 0.818070818070818f,
		-0.7100313479623824f, 0.5665445665445665f,
		-0.5768025078369906f, 0.818070818070818f,
		-0.10658307210031348f, -0.4993894993894994f,
		0.006269592476489061f, -0.19413919413919412f,
		0.08150470219435735f, -0.4993894993894994f,
		0.5689655172413792f, 0.818070818070818f,
		0.6896551724137931f, 0.5665445665445665f,
		1.0f, 0.818070818070818f,
		0.6896551724137931f, -1.0f,
		1.0f, -1.0f,
	};
	Gui::characters[45].vao = gui::Gui::loadCharacterVertices(mCapVertices, sizeof(mCapVertices));
	Gui::characters[45].ranges.push_back({ 0, 13 });
	Gui::characters[45].width = 0.778998778998779f;

	// nCap
	float nCapVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.6525821596244131f, -1.0f,
		-1.0f, 0.818070818070818f,
		-0.6525821596244131f, 0.5677655677655677f,
		-0.4723004694835681f, 0.818070818070818f,
		0.5830985915492957f, -1.0f,
		0.6525821596244132f, -0.6214896214896215f,
		1.0f, -1.0f,
		0.6525821596244132f, 0.818070818070818f,
		1.0f, 0.818070818070818f,
	};
	Gui::characters[46].vao = gui::Gui::loadCharacterVertices(nCapVertices, sizeof(nCapVertices));
	Gui::characters[46].ranges.push_back({ 0, 10 });
	Gui::characters[46].width = 0.6501831501831502f;

	// oCap
	float oCapVertices[] = {
		// Triangle strip 0
		-1.0f, -0.09157509157509147f,
		-0.6871678056188306f, -0.09157509157509147f,
		-0.929384965831435f, 0.31135531135531136f,
		-0.639331814730448f, 0.22588522588522586f,
		-0.7281700835231587f, 0.6092796092796093f,
		-0.5018982536066818f, 0.45909645909645913f,
		-0.4130599848139711f, 0.7930402930402931f,
		-0.2854973424449506f, 0.6013431013431013f,
		-0.0007593014426727773f, 0.855921855921856f,
		0.0007593014426727773f, 0.647130647130647f,
		0.41533788914198944f, 0.7912087912087912f,
		0.28549734244495073f, 0.6001221001221001f,
		0.7281700835231586f, 0.6092796092796093f,
		0.5018982536066818f, 0.45909645909645913f,
		0.9286256643887623f, 0.3125763125763126f,
		0.6385725132877753f, 0.2283272283272283f,
		1.0f, -0.09157509157509147f,
		0.6871678056188306f, -0.09157509157509147f,
		0.9301442672741078f, -0.4908424908424909f,
		0.6476841305998482f, -0.3846153846153846f,
		0.7281700835231586f, -0.7899877899877901f,
		0.5003796507213363f, -0.6385836385836385f,
		0.4054669703872438f, -0.9774114774114775f,
		0.28473804100227795f, -0.7814407814407816f,
		-0.0007593014426727773f, -1.0378510378510377f,
		0.0007593014426727773f, -0.829059829059829f,
		-0.4138192862566439f, -0.9755799755799757f,
		-0.31662870159453305f, -0.7667887667887667f,
		-0.7296886864085042f, -0.7899877899877901f,
		-0.5003796507213364f, -0.6385836385836385f,
		-0.9301442672741078f, -0.4920634920634921f,
		-0.6385725132877753f, -0.413919413919414f,
		-1.0f, -0.09157509157509147f,
		-0.6871678056188306f, -0.09157509157509147f,
	};
	Gui::characters[47].vao = gui::Gui::loadCharacterVertices(oCapVertices, sizeof(oCapVertices));
	Gui::characters[47].ranges.push_back({ 0, 34 });
	Gui::characters[47].width = 0.8040293040293041f;

	// pCap
	float pCapVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.5787234042553191f, -1.0f,
		-1.0f, 0.818070818070818f,
		-0.5787234042553191f, 0.6105006105006106f,
		-0.20425531914893613f, 0.818070818070818f,
		-0.2297872340425532f, 0.6105006105006106f,
		0.274468085106383f, 0.7912087912087912f,
		0.10106382978723394f, 0.5946275946275946f,
		0.623404255319149f, 0.7045177045177045f,
		0.33404255319148946f, 0.540903540903541f,
		0.8999999999999999f, 0.5280830280830281f,
		0.5053191489361701f, 0.4273504273504274f,
		1.0f, 0.2698412698412699f,
		0.5617021276595744f, 0.2637362637362637f,
		0.926595744680851f, 0.045787545787545736f,
		0.5191489361702128f, 0.11233211233211238f,
		0.7234042553191489f, -0.13431013431013428f,
		0.38297872340425543f, -0.0073260073260073f,
		0.3382978723404255f, -0.27472527472527464f,
		0.12127659574468086f, -0.09218559218559208f,
		-0.22127659574468084f, -0.3223443223443223f,
		-0.2914893617021277f, -0.11599511599511603f,
		-0.5787234042553191f, -0.3223443223443223f,
		-0.5787234042553191f, -0.11599511599511603f,
	};
	Gui::characters[48].vao = gui::Gui::loadCharacterVertices(pCapVertices, sizeof(pCapVertices));
	Gui::characters[48].ranges.push_back({ 0, 24 });
	Gui::characters[48].width = 0.5738705738705738f;

	// qCap
	float qCapVertices[] = {
		// Triangle strip 0
		1.0f, -1.2246642246642248f,
		1.0f, -1.4444444444444446f,
		0.9591527987897126f, -1.2246642246642248f,
		0.8282904689863844f, -1.4700854700854702f,
		0.8411497730711044f, -1.2521367521367521f,
		0.6490166414523448f, -1.4786324786324787f,
		0.6989409984871406f, -1.2673992673992673f,
		0.42360060514372155f, -1.4505494505494507f,
		0.5393343419062027f, -1.2496947496947497f,
		0.23751891074130116f, -1.363858363858364f,
		0.44024205748865364f, -1.1941391941391943f,
		0.11573373676248111f, -1.2246642246642248f,
		0.3835098335854765f, -1.1080586080586081f,
		0.06505295007564293f, -1.0366300366300365f,
		0.3540090771558244f, -0.9853479853479854f,
		0.28290468986384276f, -0.7814407814407816f,
		0.8214826021180031f, -0.673992673992674f,
		0.49470499243570343f, -0.6398046398046398f,
		0.9470499243570347f, -0.4212454212454213f,
		0.6399394856278366f, -0.38949938949938945f,
		0.9924357034795763f, -0.09157509157509147f,
		0.680786686838124f, -0.09157509157509147f,
		0.9213313161875945f, 0.3125763125763126f,
		0.632375189107413f, 0.2283272283272283f,
		0.7216338880484114f, 0.6092796092796093f,
		0.49621785173978816f, 0.45909645909645913f,
		0.40998487140695916f, 0.7912087912087912f,
		0.28063540090771566f, 0.6001221001221001f,
		-0.004538577912254205f, 0.855921855921856f,
		-0.00302571860816947f, 0.647130647130647f,
		-0.4152798789712556f, 0.7930402930402931f,
		-0.2881996974281392f, 0.6013431013431013f,
		-0.7291981845688351f, 0.6092796092796093f,
		-0.5037821482602118f, 0.45909645909645913f,
		-0.9296520423600605f, 0.31135531135531136f,
		-0.640695915279879f, 0.22588522588522586f,
		-1.0f, -0.09157509157509147f,
		-0.6883509833585477f, -0.09157509157509147f,
		-0.9304084720121029f, -0.4920634920634921f,
		-0.6399394856278366f, -0.41147741147741157f,
		-0.7307110438729199f, -0.7899877899877901f,
		-0.5022692889561271f, -0.6398046398046398f,
		-0.41679273827534036f, -0.9737484737484738f,
		-0.302571860816944f, -0.7753357753357752f,
		-0.004538577912254205f, -1.0366300366300365f,
		-0.00302571860816947f, -0.8302808302808302f,
		0.06505295007564293f, -1.0366300366300365f,
		0.28290468986384276f, -0.7814407814407816f,
	};
	Gui::characters[49].vao = gui::Gui::loadCharacterVertices(qCapVertices, sizeof(qCapVertices));
	Gui::characters[49].ranges.push_back({ 0, 48 });
	Gui::characters[49].width = 0.8070818070818071f;

	// rCap
	float rCapVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.6565481352992194f, -1.0f,
		-1.0f, 0.818070818070818f,
		-0.6565481352992194f, 0.6105006105006106f,
		-0.3339115351257589f, 0.818070818070818f,
		-0.31656548135299223f, 0.6105006105006106f,
		0.03816131830008662f, 0.800976800976801f,
		-0.07545533391153514f, 0.5964590964590964f,
		0.32350390286209896f, 0.7216117216117216f,
		0.09453599306157856f, 0.5482295482295483f,
		0.5377276669557676f, 0.5641025641025641f,
		0.21769297484822192f, 0.44749694749694746f,
		0.616652211621856f, 0.32478632478632474f,
		0.2575888985255854f, 0.3064713064713065f,
		0.5871639202081527f, 0.15873015873015872f,
		0.22202948829141378f, 0.14041514041514036f,
		0.47267996530789236f, -0.009768009768009733f,
		0.1118820468343451f, 0.01831501831501836f,
		0.29921942758022557f, -0.1282051282051282f,
		-0.08933217692974849f, -0.057387057387057405f,
		0.0806591500433651f, -0.20879120879120872f,
		-0.35472679965307896f, -0.07570207570207566f,
		-0.26452732003469215f, -0.27716727716727707f,
		-0.6565481352992194f, -0.07570207570207566f,
		-0.6565481352992194f, -0.27716727716727707f,
		// Triangle strip 1
		0.0806591500433651f, -0.20879120879120872f,
		-0.26452732003469215f, -0.27716727716727707f,
		1.0f, -1.0f,
		0.554206418039896f, -1.0f,
	};
	Gui::characters[50].vao = gui::Gui::loadCharacterVertices(rCapVertices, sizeof(rCapVertices));
	Gui::characters[50].ranges.push_back({ 0, 25 });
	Gui::characters[50].ranges.push_back({ 25, 4 });
	Gui::characters[50].width = 0.703907203907204f;

	// sCap
	float sCapVertices[] = {
		// Triangle strip 0
		-1.0f, -0.5885225885225884f,
		-1.0f, -0.8913308913308913f,
		-0.9723593287265548f, -0.5885225885225884f,
		-0.579466929911155f, -0.9926739926739927f,
		-0.5340572556762093f, -0.7631257631257631f,
		-0.03455083909180656f, -1.0329670329670328f,
		-0.06219151036525172f, -0.8241758241758241f,
		0.41164856860809484f, -0.9902319902319903f,
		0.4274432379072064f, -0.7411477411477412f,
		0.7334649555774926f, -0.8681318681318682f,
		0.5932872655478776f, -0.5201465201465201f,
		0.9289239881539981f, -0.6923076923076923f,
		0.5064165844027642f, -0.343101343101343f,
		1.0f, -0.48229548229548236f,
		0.23000987166831188f, -0.2417582417582418f,
		0.859822309970385f, -0.19658119658119655f,
		-0.01875616979269501f, -0.20146520146520142f,
		0.41559723593287257f, -0.023199023199023117f,
		-0.30108588351431387f, -0.15873015873015883f,
		0.11747285291214205f, 0.02564102564102566f,
		-0.5735439289239881f, -0.09645909645909656f,
		-0.18657453109575517f, 0.072039072039072f,
		-0.786771964461994f, 0.0024420024420024333f,
		-0.47285291214215197f, 0.17216117216117222f,
		-0.926949654491609f, 0.1428571428571429f,
		-0.5715695952615992f, 0.3565323565323565f,
		-0.9782823297137216f, 0.33089133089133094f,
		-0.5320829220138203f, 0.46886446886446886f,
		-0.8973346495557749f, 0.5494505494505495f,
		-0.40375123395853896f, 0.5628815628815629f,
		-0.6999012833168805f, 0.702075702075702f,
		-0.1984205330700889f, 0.6239316239316239f,
		-0.40572556762092793f, 0.8083028083028083f,
		0.036525172754195534f, 0.6422466422466422f,
		0.010858835143139123f, 0.851037851037851f,
		0.4965449160908193f, 0.5824175824175823f,
		0.4787759131293188f, 0.8205128205128205f,
		0.8558736426456071f, 0.4444444444444444f,
		0.8854886475814412f, 0.7338217338217339f,
		0.8854886475814412f, 0.4444444444444444f,
	};
	Gui::characters[51].vao = gui::Gui::loadCharacterVertices(sCapVertices, sizeof(sCapVertices));
	Gui::characters[51].ranges.push_back({ 0, 40 });
	Gui::characters[51].width = 0.6184371184371185f;

	// tCap
	float tCapVertices[] = {
		// Triangle strip 0
		-1.0f, 0.818070818070818f,
		-1.0f, 0.6031746031746033f,
		1.0f, 0.818070818070818f,
		1.0f, 0.6031746031746033f,
		// Triangle strip 1
		-0.1652754590984975f, 0.6031746031746033f,
		0.1652754590984975f, 0.6031746031746033f,
		-0.1652754590984975f, -1.0f,
		0.1652754590984975f, -1.0f,
	};
	Gui::characters[52].vao = gui::Gui::loadCharacterVertices(tCapVertices, sizeof(tCapVertices));
	Gui::characters[52].ranges.push_back({ 0, 4 });
	Gui::characters[52].ranges.push_back({ 4, 4 });
	Gui::characters[52].width = 0.7313797313797313f;

	// uCap
	float uCapVertices[] = {
		// Triangle strip 0
		-1.0f, 0.818070818070818f,
		-0.6323119777158774f, 0.818070818070818f,
		-1.0f, -0.3162393162393162f,
		-0.6323119777158774f, -0.3162393162393162f,
		-0.9405756731662024f, -0.6428571428571428f,
		-0.6081708449396472f, -0.528083028083028f,
		-0.7363045496750232f, -0.8705738705738706f,
		-0.5134633240482822f, -0.6825396825396826f,
		-0.42618384401114207f, -0.9957264957264957f,
		-0.3119777158774373f, -0.7936507936507937f,
		-0.0009285051067781103f, -1.0378510378510377f,
		-0.0009285051067781103f, -0.8315018315018314f,
		0.4289693593314763f, -0.9963369963369964f,
		0.3054781801299906f, -0.7936507936507937f,
		0.7363045496750231f, -0.8705738705738706f,
		0.5134633240482822f, -0.6825396825396826f,
		0.9415041782729805f, -0.641025641025641f,
		0.607242339832869f, -0.5286935286935286f,
		1.0f, -0.3162393162393162f,
		0.6323119777158774f, -0.3223443223443223f,
		1.0f, 0.818070818070818f,
		0.6323119777158774f, 0.818070818070818f,
	};
	Gui::characters[53].vao = gui::Gui::loadCharacterVertices(uCapVertices, sizeof(uCapVertices));
	Gui::characters[53].ranges.push_back({ 0, 22 });
	Gui::characters[53].width = 0.6575091575091575f;

	// vCap
	float vCapVertices[] = {
		// Triangle strip 0
		-1.0f, 0.818070818070818f,
		-0.6575121163166397f, 0.818070818070818f,
		-0.17285945072697895f, -1.0f,
		0.008077544426494443f, -0.6910866910866911f,
		0.17285945072697895f, -1.0f,
		0.6736672051696284f, 0.818070818070818f,
		1.0f, 0.818070818070818f,
	};
	Gui::characters[54].vao = gui::Gui::loadCharacterVertices(vCapVertices, sizeof(vCapVertices));
	Gui::characters[54].ranges.push_back({ 0, 7 });
	Gui::characters[54].width = 0.7557997557997558f;

	// wCap
	float wCapVertices[] = {
		// Triangle strip 0
		-1.0f, 0.818070818070818f,
		-0.7738161559888579f, 0.818070818070818f,
		-0.5754874651810584f, -1.0f,
		-0.4395543175487465f, -0.6935286935286935f,
		-0.3325905292479109f, -1.0f,
		-0.1075208913649025f, 0.818070818070818f,
		-0.0027855153203342198f, 0.5091575091575091f,
		0.11643454038997225f, 0.818070818070818f,
		0.33481894150417824f, -1.0f,
		0.45181058495821724f, -0.7081807081807081f,
		0.5832869080779943f, -1.0f,
		0.7838440111420613f, 0.818070818070818f,
		1.0f, 0.818070818070818f,
	};
	Gui::characters[55].vao = gui::Gui::loadCharacterVertices(wCapVertices, sizeof(wCapVertices));
	Gui::characters[55].ranges.push_back({ 0, 13 });
	Gui::characters[55].width = 1.095848595848596f;

	// xCap
	float xCapVertices[] = {
		// Triangle strip 0
		-0.9761295822676896f, 0.818070818070818f,
		-0.5907928388746804f, 0.818070818070818f,
		0.6129582267689684f, -1.0f,
		1.0f, -1.0f,
		// Triangle strip 1
		-1.0f, -1.0f,
		-0.6351236146632566f, -1.0f,
		0.6317135549872124f, 0.818070818070818f,
		0.9982949701619779f, 0.818070818070818f,
	};
	Gui::characters[56].vao = gui::Gui::loadCharacterVertices(xCapVertices, sizeof(xCapVertices));
	Gui::characters[56].ranges.push_back({ 0, 4 });
	Gui::characters[56].ranges.push_back({ 4, 4 });
	Gui::characters[56].width = 0.7161172161172161f;

	// yCap
	float yCapVertices[] = {
		// Triangle strip 0
		-1.0f, 0.818070818070818f,
		-0.6345514950166113f, 0.818070818070818f,
		-0.16445182724252494f, -0.2210012210012211f,
		0.0033222591362125353f, 0.015873015873015928f,
		0.16445182724252483f, -0.19536019536019533f,
		0.6511627906976745f, 0.818070818070818f,
		1.0f, 0.818070818070818f,
		// Triangle strip 1
		-0.16445182724252494f, -1.0f,
		0.16445182724252483f, -1.0f,
		-0.16445182724252494f, -0.2210012210012211f,
		0.16445182724252483f, -0.19536019536019533f,
	};
	Gui::characters[57].vao = gui::Gui::loadCharacterVertices(yCapVertices, sizeof(yCapVertices));
	Gui::characters[57].ranges.push_back({ 0, 7 });
	Gui::characters[57].ranges.push_back({ 7, 4 });
	Gui::characters[57].width = 0.7350427350427351f;

	// zCap
	float zCapVertices[] = {
		// Triangle strip 0
		-0.9307692307692308f, 0.818070818070818f,
		-0.9307692307692308f, 0.6031746031746033f,
		0.9615384615384615f, 0.818070818070818f,
		0.5326923076923078f, 0.6031746031746033f,
		0.9615384615384615f, 0.5995115995115995f,
		-1.0f, -0.7753357753357752f,
		-0.5884615384615385f, -0.7851037851037852f,
		-1.0f, -1.0f,
		1.0f, -0.7851037851037852f,
		1.0f, -1.0f,
	};
	Gui::characters[58].vao = gui::Gui::loadCharacterVertices(zCapVertices, sizeof(zCapVertices));
	Gui::characters[58].ranges.push_back({ 0, 10 });
	Gui::characters[58].width = 0.6349206349206349f;

	// bracketleft
	float bracketleftVertices[] = {
		// Triangle strip 0
		1.0f, 0.8998778998778999f,
		1.0f, 0.7252747252747253f,
		-1.0f, 0.8998778998778999f,
		-0.32692307692307687f, 0.7252747252747253f,
		-1.0f, -1.4786324786324787f,
		-0.32692307692307687f, -1.3040293040293038f,
		1.0f, -1.4786324786324787f,
		1.0f, -1.3040293040293038f,
	};
	Gui::characters[59].vao = gui::Gui::loadCharacterVertices(bracketleftVertices, sizeof(bracketleftVertices));
	Gui::characters[59].ranges.push_back({ 0, 8 });
	Gui::characters[59].width = 0.31746031746031744f;

	// backslash
	float backslashVertices[] = {
		// Triangle strip 0
		-1.0f, 0.8998778998778999f,
		-0.5425531914893618f, 0.8998778998778999f,
		0.550531914893617f, -1.3956043956043955f,
		1.0f, -1.3956043956043955f,
	};
	Gui::characters[60].vao = gui::Gui::loadCharacterVertices(backslashVertices, sizeof(backslashVertices));
	Gui::characters[60].ranges.push_back({ 0, 4 });
	Gui::characters[60].width = 0.4590964590964591f;

	// bracketright
	float bracketrightVertices[] = {
		// Triangle strip 0
		-1.0f, 0.8998778998778999f,
		-1.0f, 0.7252747252747253f,
		1.0f, 0.8998778998778999f,
		0.32692307692307687f, 0.7252747252747253f,
		1.0f, -1.4786324786324787f,
		0.32692307692307687f, -1.3040293040293038f,
		-1.0f, -1.4786324786324787f,
		-1.0f, -1.3040293040293038f,
	};
	Gui::characters[61].vao = gui::Gui::loadCharacterVertices(bracketrightVertices, sizeof(bracketrightVertices));
	Gui::characters[61].ranges.push_back({ 0, 8 });
	Gui::characters[61].width = 0.31746031746031744f;

	// asciicircum
	float asciicircumVertices[] = {
		// Triangle strip 0
		-1.0f, -0.16727716727716735f,
		-0.6781045751633987f, -0.16727716727716735f,
		-0.1029411764705882f, 0.818070818070818f,
		-0.0016339869281045694f, 0.5982905982905983f,
		0.10294117647058831f, 0.818070818070818f,
		0.6764705882352942f, -0.16483516483516492f,
		1.0f, -0.16483516483516492f,
	};
	Gui::characters[62].vao = gui::Gui::loadCharacterVertices(asciicircumVertices, sizeof(asciicircumVertices));
	Gui::characters[62].ranges.push_back({ 0, 7 });
	Gui::characters[62].width = 0.7472527472527473f;

	// underscore
	float underscoreVertices[] = {
		// Triangle strip 0
		-1.0f, -1.2075702075702077f,
		-1.0f, -1.3663003663003663f,
		1.0f, -1.2075702075702077f,
		1.0f, -1.3663003663003663f,
	};
	Gui::characters[63].vao = gui::Gui::loadCharacterVertices(underscoreVertices, sizeof(underscoreVertices));
	Gui::characters[63].ranges.push_back({ 0, 4 });
	Gui::characters[63].width = 0.702075702075702f;

	// grave
	float graveVertices[] = {
		// Triangle strip 0
		0.29383886255924163f, 0.5897435897435898f,
		1.0f, 0.5897435897435898f,
		-1.0f, 1.0463980463980465f,
		0.15165876777251186f, 1.0463980463980465f,
	};
	Gui::characters[64].vao = gui::Gui::loadCharacterVertices(graveVertices, sizeof(graveVertices));
	Gui::characters[64].ranges.push_back({ 0, 4 });
	Gui::characters[64].width = 0.2576312576312576f;

	// a
	float aVertices[] = {
		// Triangle strip 0
		1.0f, -1.0f,
		0.5793025871766029f, -1.0f,
		1.0f, -0.06715506715506714f,
		0.5793025871766029f, -0.10256410256410264f,
		0.9325084364454443f, 0.1501831501831502f,
		0.5793025871766029f, -0.05860805860805862f,
		0.7277840269966254f, 0.29548229548229543f,
		0.5343082114735658f, 0.0714285714285714f,
		0.40832395950506184f, 0.37484737484737485f,
		0.40832395950506184f, 0.14774114774114777f,
		-0.028121484814398245f, 0.39682539682539686f,
		0.21034870641169845f, 0.184981684981685f,
		-0.46006749156355453f, 0.37484737484737485f,
		-0.030371203599550034f, 0.19413919413919412f,
		-0.7952755905511811f, 0.3345543345543346f,
		-0.374578177727784f, 0.17032967032967028f,
		-0.7952755905511811f, 0.10134310134310132f,
		-0.7705286839145107f, 0.10134310134310132f,
		// Triangle strip 1
		-0.7952755905511811f, 0.10134310134310132f,
		// Triangle strip 2
		0.5793025871766029f, -0.10256410256410264f,
		0.5793025871766029f, -0.2857142857142858f,
		-0.04161979752530931f, -0.13247863247863245f,
		0.1979752530933634f, -0.3058608058608059f,
		-0.5410573678290214f, -0.20512820512820507f,
		-0.17435320584926883f, -0.3418803418803418f,
		-0.889763779527559f, -0.3632478632478633f,
		-0.45331833520809894f, -0.427960927960928f,
		-1.0f, -0.6043956043956045f,
		-0.5635545556805399f, -0.5897435897435896f,
		-0.9392575928008999f, -0.7783882783882783f,
		-0.5433070866141732f, -0.6776556776556777f,
		-0.7772778402699663f, -0.916971916971917f,
		-0.44206974128233967f, -0.7667887667887667f,
		-0.532058492688414f, -1.006105006105006f,
		-0.2890888638920135f, -0.811965811965812f,
		-0.2373453318335208f, -1.0378510378510377f,
		-0.08661417322834641f, -0.8266178266178266f,
		0.05624296962879649f, -1.0207570207570207f,
		0.09786276715410569f, -0.8156288156288156f,
		0.27334083239595053f, -0.971916971916972f,
		0.2755905511811023f, -0.7802197802197801f,
		0.4409448818897639f, -0.9126984126984128f,
		0.4353205849268842f, -0.7264957264957266f,
		0.5793025871766029f, -0.8547008547008548f,
		0.5793025871766029f, -0.6642246642246643f,
	};
	Gui::characters[65].vao = gui::Gui::loadCharacterVertices(aVertices, sizeof(aVertices));
	Gui::characters[65].ranges.push_back({ 0, 18 });
	Gui::characters[65].ranges.push_back({ 18, 1 });
	Gui::characters[65].ranges.push_back({ 19, 26 });
	Gui::characters[65].width = 0.5427350427350427f;

	// b
	float bVertices[] = {
		// Triangle strip 0
		-0.5987193169690501f, 0.221001221001221f,
		-0.5987193169690501f, 0.028083028083028094f,
		-0.2700106723585912f, 0.3504273504273504f,
		-0.29455709711846323f, 0.13919413919413914f,
		0.13127001067235855f, 0.4017094017094017f,
		0.03735325506937026f, 0.18315018315018317f,
		0.46424759871931687f, 0.3626373626373627f,
		0.272145144076841f, 0.15506715506715507f,
		0.7673425827107792f, 0.21611721611721613f,
		0.45570971184631803f, 0.057387057387057405f,
		0.9413020277481323f, -0.00366300366300365f,
		0.5528281750266808f, -0.098901098901099f,
		1.0f, -0.29548229548229554f,
		0.5859124866595518f, -0.3137973137973138f,
		0.9402347918890075f, -0.575091575091575f,
		0.5538954108858059f, -0.5164835164835164f,
		0.7161152614727855f, -0.8339438339438339f,
		0.41088580576307354f, -0.7069597069597069f,
		0.3938100320170759f, -0.9877899877899878f,
		0.20170757737459977f, -0.800976800976801f,
		0.005336179295624355f, -1.0378510378510377f,
		-0.07150480256136604f, -0.8315018315018314f,
		-0.32657417289220914f, -1.0103785103785103f,
		-0.3297758804695837f, -0.8137973137973138f,
		-0.5987193169690501f, -0.9365079365079365f,
		-0.5987193169690501f, -0.7533577533577533f,
		-0.624332977588047f, -1.0f,
		-1.0f, -1.0f,
		-0.5987193169690501f, -0.7533577533577533f,
		-1.0f, 0.8998778998778999f,
		-0.5987193169690501f, 0.8998778998778999f,
	};
	Gui::characters[66].vao = gui::Gui::loadCharacterVertices(bVertices, sizeof(bVertices));
	Gui::characters[66].ranges.push_back({ 0, 31 });
	Gui::characters[66].width = 0.572039072039072f;

	// c
	float cVertices[] = {
		// Triangle strip 0
		1.0f, -0.6654456654456655f,
		1.0f, -0.9230769230769231f,
		0.9741480611045827f, -0.6654456654456655f,
		0.8354876615746181f, -0.9615384615384615f,
		0.6286721504112809f, -0.7851037851037852f,
		0.6568742655699178f, -0.9951159951159951f,
		0.21739130434782616f, -0.8315018315018314f,
		0.4547591069330199f, -1.0213675213675213f,
		-0.0716803760282021f, -0.8046398046398047f,
		0.22444183313748534f, -1.0305250305250304f,
		-0.3396004700352526f, -0.6971916971916972f,
		-0.2714453584018801f, -0.9871794871794872f,
		-0.4900117508813161f, -0.5360195360195361f,
		-0.6592244418331374f, -0.855921855921856f,
		-0.5417156286721504f, -0.3199023199023199f,
		-0.9106933019976499f, -0.6343101343101343f,
		-0.48766157461809634f, -0.098901098901099f,
		-1.0f, -0.3199023199023199f,
		-0.3349001175088132f, 0.06227106227106227f,
		-0.9071680376028202f, -0.009768009768009733f,
		-0.08578143360752055f, 0.1648351648351648f,
		-0.6592244418331374f, 0.21001221001221004f,
		0.21739130434782616f, 0.19658119658119655f,
		-0.27262044653349005f, 0.34737484737484736f,
		0.4571092831962398f, 0.1782661782661783f,
		0.22444183313748534f, 0.39560439560439564f,
		0.673325499412456f, 0.1355311355311355f,
		0.6415981198589895f, 0.3638583638583639f,
		0.8531139835487662f, 0.08058608058608063f,
		1.0f, 0.29059829059829057f,
		0.9741480611045827f, 0.03296703296703296f,
		1.0f, 0.03296703296703296f,
	};
	Gui::characters[67].vao = gui::Gui::loadCharacterVertices(cVertices, sizeof(cVertices));
	Gui::characters[67].ranges.push_back({ 0, 32 });
	Gui::characters[67].width = 0.5195360195360196f;

	// d
	float dVertices[] = {
		// Triangle strip 0
		0.5987193169690501f, 0.3089133089133089f,
		0.5987193169690501f, 0.11843711843711846f,
		0.31910352187833513f, 0.3791208791208791f,
		0.33084311632870866f, 0.17582417582417587f,
		0.007470651013874008f, 0.4017094017094017f,
		0.0736392742796157f, 0.19169719169719168f,
		-0.37993596584845246f, 0.351037851037851f,
		-0.20170757737459977f, 0.15873015873015872f,
		-0.6947705442902882f, 0.21123321123321126f,
		-0.41088580576307365f, 0.05982905982905984f,
		-0.9188900747065102f, -0.01770451770451764f,
		-0.5432230522945571f, -0.10744810744810751f,
		-1.0f, -0.3284493284493284f,
		-0.5859124866595518f, -0.3235653235653235f,
		-0.935965848452508f, -0.6330891330891331f,
		-0.5538954108858057f, -0.5323565323565325f,
		-0.7545357524012807f, -0.855921855921856f,
		-0.4514407684098186f, -0.6923076923076923f,
		-0.47385272145144075f, -0.9914529914529915f,
		-0.27854855923159016f, -0.7863247863247864f,
		-0.11419423692636077f, -1.0378510378510377f,
		-0.02027748132337248f, -0.8192918192918193f,
		0.09925293489861264f, -1.025030525030525f,
		0.1440768409818569f, -0.8083028083028083f,
		0.2764140875133405f, -0.989010989010989f,
		0.2977588046958377f, -0.7777777777777777f,
		0.4364994663820705f, -0.9352869352869353f,
		0.4194236926360726f, -0.7423687423687424f,
		0.5987193169690501f, -0.8608058608058609f,
		0.5987193169690501f, -0.667887667887668f,
		0.5987193169690501f, -1.0f,
		1.0f, -1.0f,
		0.5987193169690501f, 0.8998778998778999f,
		1.0f, 0.8998778998778999f,
	};
	Gui::characters[68].vao = gui::Gui::loadCharacterVertices(dVertices, sizeof(dVertices));
	Gui::characters[68].ranges.push_back({ 0, 34 });
	Gui::characters[68].width = 0.572039072039072f;

	// e
	float eVertices[] = {
		// Triangle strip 0
		0.9564766839378238f, -0.6666666666666667f,
		0.9564766839378238f, -0.916971916971917f,
		0.933678756476684f, -0.6666666666666667f,
		0.7865284974093265f, -0.9566544566544566f,
		0.8134715025906736f, -0.716117216117216f,
		0.6041450777202073f, -0.9938949938949939f,
		0.6352331606217616f, -0.7704517704517704f,
		0.3979274611398964f, -1.021978021978022f,
		0.4124352331606218f, -0.8144078144078144f,
		0.16476683937823844f, -1.0317460317460316f,
		0.160621761658031f, -0.8315018315018314f,
		-0.28911917098445594f, -0.9938949938949939f,
		-0.15647668393782388f, -0.800976800976801f,
		-0.6953367875647669f, -0.8485958485958487f,
		-0.4010362694300518f, -0.7057387057387057f,
		-0.9129533678756476f, -0.6422466422466422f,
		-0.5606217616580311f, -0.5372405372405373f,
		-1.0f, -0.32600732600732596f,
		-0.6041450777202073f, -0.3418803418803418f,
		-0.9295336787564767f, -0.031746031746031855f,
		-0.6041450777202073f, -0.16605616605616613f,
		-0.7036269430051814f, 0.20390720390720396f,
		-0.5461139896373057f, -0.014041514041513992f,
		-0.4051813471502591f, 0.34065934065934067f,
		-0.41347150259067356f, 0.10500610500610497f,
		-0.1772020725388601f, 0.387057387057387f,
		-0.2155440414507772f, 0.184981684981685f,
		0.07150259067357512f, 0.4017094017094017f,
		0.04870466321243527f, 0.21245421245421248f,
		0.4528497409326424f, 0.3650793650793651f,
		0.31295336787564776f, 0.1855921855921856f,
		0.7430051813471503f, 0.2503052503052503f,
		0.48808290155440415f, 0.1074481074481074f,
		0.933678756476684f, 0.05921855921855923f,
		0.583419689119171f, -0.006105006105006083f,
		1.0f, -0.21733821733821723f,
		0.6207253886010362f, -0.16605616605616613f,
		1.0f, -0.3418803418803418f,
		-0.6041450777202073f, -0.16605616605616613f,
		-0.6041450777202073f, -0.3418803418803418f,
	};
	Gui::characters[69].vao = gui::Gui::loadCharacterVertices(eVertices, sizeof(eVertices));
	Gui::characters[69].ranges.push_back({ 0, 40 });
	Gui::characters[69].width = 0.5891330891330891f;

	// f
	float fVertices[] = {
		// Triangle strip 0
		-0.6345323741007194f, -1.0f,
		-0.09352517985611508f, -1.0f,
		-0.6345323741007194f, 0.17338217338217343f,
		-0.09352517985611508f, 0.17338217338217343f,
		-0.6345323741007194f, 0.3638583638583639f,
		-0.11079136690647484f, 0.3638583638583639f,
		-0.6345323741007194f, 0.409035409035409f,
		-0.11079136690647484f, 0.41025641025641024f,
		-0.5798561151079137f, 0.6031746031746033f,
		-0.07913669064748197f, 0.5482295482295483f,
		-0.35539568345323747f, 0.7838827838827839f,
		0.03309352517985609f, 0.6459096459096458f,
		-0.03884892086330938f, 0.8766788766788767f,
		0.25467625899280577f, 0.6984126984126984f,
		0.4446043165467626f, 0.9120879120879121f,
		0.5223021582733813f, 0.7118437118437119f,
		0.7381294964028777f, 0.9053724053724054f,
		0.7640287769784173f, 0.7014652014652014f,
		1.0f, 0.8901098901098901f,
		0.9712230215827338f, 0.6800976800976801f,
		1.0f, 0.6800976800976801f,
		// Triangle strip 1
		-1.0f, 0.3638583638583639f,
		-1.0f, 0.17338217338217343f,
		0.7841726618705036f, 0.3638583638583639f,
		0.7841726618705036f, 0.17338217338217343f,
	};
	Gui::characters[70].vao = gui::Gui::loadCharacterVertices(fVertices, sizeof(fVertices));
	Gui::characters[70].ranges.push_back({ 0, 21 });
	Gui::characters[70].ranges.push_back({ 21, 4 });
	Gui::characters[70].width = 0.4242979242979243f;

	// g
	float gVertices[] = {
		// Triangle strip 0
		-0.7716115261472786f, -1.2185592185592187f,
		-0.7716115261472786f, -1.457875457875458f,
		-0.7502668089647813f, -1.2185592185592187f,
		-0.43116328708644613f, -1.5006105006105006f,
		-0.4514407684098186f, -1.2759462759462759f,
		-0.07363927427961581f, -1.5164835164835164f,
		-0.04162219850586979f, -1.3113553113553111f,
		0.35538954108858056f, -1.4847374847374848f,
		0.27427961579509064f, -1.2832722832722832f,
		0.735325506937033f, -1.3540903540903542f,
		0.4749199573105656f, -1.2051282051282053f,
		0.944503735325507f, -1.122100122100122f,
		0.5709711846318035f, -1.0891330891330893f,
		1.0f, -0.844932844932845f,
		0.5987193169690501f, -0.938949938949939f,
		1.0f, 0.3638583638583639f,
		0.5987193169690501f, -0.8192918192918193f,
		0.6221985058697972f, 0.3638583638583639f,
		0.5987193169690501f, 0.11843711843711846f,
		0.5987193169690501f, 0.3052503052503053f,
		0.3223052294557096f, 0.1776556776556777f,
		0.32657417289220914f, 0.3766788766788767f,
		0.06937033084311639f, 0.19536019536019533f,
		0.005336179295624355f, 0.4017094017094017f,
		-0.21451440768409824f, 0.15995115995115994f,
		-0.3745997865528282f, 0.35409035409035405f,
		-0.41088580576307365f, 0.06715506715506714f,
		-0.6926360725720384f, 0.21855921855921856f,
		-0.5453575240128068f, -0.09645909645909656f,
		-0.9167556029882604f, -0.004273504273504258f,
		-0.5859124866595518f, -0.3003663003663004f,
		-1.0f, -0.3052503052503053f,
		-0.560298826040555f, -0.4774114774114775f,
		-0.9466382070437567f, -0.5763125763125763f,
		-0.4514407684098186f, -0.6459096459096458f,
		-0.7588046958377801f, -0.8034188034188035f,
		-0.272145144076841f, -0.7362637362637363f,
		-0.496264674493063f, -0.927960927960928f,
		-0.02027748132337248f, -0.7643467643467643f,
		-0.10992529348986124f, -0.9768009768009769f,
		0.3009605122732124f, -0.728937728937729f,
		0.2806830309498398f, -0.9383394383394383f,
		0.5987193169690501f, -0.63003663003663f,
		0.5987193169690501f, -0.8192918192918193f,
	};
	Gui::characters[71].vao = gui::Gui::loadCharacterVertices(gVertices, sizeof(gVertices));
	Gui::characters[71].ranges.push_back({ 0, 44 });
	Gui::characters[71].width = 0.572039072039072f;

	// h
	float hVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.571753986332574f, -1.0f,
		-1.0f, 0.8998778998778999f,
		-0.571753986332574f, 0.8998778998778999f,
		// Triangle strip 1
		-0.571753986332574f, 0.21245421245421248f,
		-0.571753986332574f, 0.01831501831501836f,
		-0.193621867881549f, 0.35286935286935284f,
		-0.2403189066059226f, 0.13736263736263732f,
		0.20045558086560367f, 0.4017094017094017f,
		0.08883826879271073f, 0.18315018315018317f,
		0.5102505694760819f, 0.37362637362637363f,
		0.3439635535307517f, 0.1581196581196581f,
		0.7881548974943053f, 0.2698412698412699f,
		0.48974943052391806f, 0.08180708180708185f,
		0.9521640091116172f, 0.09890109890109888f,
		0.5546697038724373f, -0.04822954822954828f,
		1.0f, -0.11477411477411481f,
		0.571753986332574f, -0.22344322344322354f,
		1.0f, -1.0f,
		0.571753986332574f, -1.0f,
	};
	Gui::characters[72].vao = gui::Gui::loadCharacterVertices(hVertices, sizeof(hVertices));
	Gui::characters[72].ranges.push_back({ 0, 4 });
	Gui::characters[72].ranges.push_back({ 4, 16 });
	Gui::characters[72].width = 0.536019536019536f;

	// i
	float iVertices[] = {
		// Triangle strip 0
		-1.0f, 0.8302808302808302f,
		1.0f, 0.8302808302808302f,
		-1.0f, 0.5921855921855922f,
		1.0f, 0.5921855921855922f,
		// Triangle strip 1
		-0.8785046728971962f, 0.3638583638583639f,
		0.8785046728971964f, 0.3638583638583639f,
		-0.8785046728971962f, -1.0f,
		0.8785046728971964f, -1.0f,
	};
	Gui::characters[73].vao = gui::Gui::loadCharacterVertices(iVertices, sizeof(iVertices));
	Gui::characters[73].ranges.push_back({ 0, 4 });
	Gui::characters[73].ranges.push_back({ 4, 4 });
	Gui::characters[73].width = 0.13064713064713065f;

	// j
	float jVertices[] = {
		// Triangle strip 0
		-1.0f, -1.2967032967032965f,
		-1.0f, -1.5018315018315018f,
		-0.9586466165413534f, -1.2967032967032965f,
		-0.7124060150375939f, -1.5128205128205128f,
		-0.7763157894736842f, -1.308302808302808f,
		-0.45112781954887216f, -1.5164835164835164f,
		-0.5864661654135339f, -1.313797313797314f,
		0.12030075187969924f, -1.4896214896214897f,
		-0.1221804511278195f, -1.291208791208791f,
		0.6090225563909775f, -1.3943833943833943f,
		0.15037593984962405f, -1.2197802197802199f,
		0.9172932330827068f, -1.2271062271062272f,
		0.2612781954887218f, -1.1086691086691087f,
		0.9962406015037595f, -1.039072039072039f,
		0.2894736842105263f, -0.945054945054945f,
		0.9962406015037595f, 0.3638583638583639f,
		0.2894736842105263f, 0.17338217338217343f,
		-0.4699248120300752f, 0.3638583638583639f,
		-0.4699248120300752f, 0.17338217338217343f,
		// Triangle strip 1
		0.19548872180451138f, 0.8302808302808302f,
		1.0f, 0.8302808302808302f,
		0.19548872180451138f, 0.5921855921855922f,
		1.0f, 0.5921855921855922f,
	};
	Gui::characters[74].vao = gui::Gui::loadCharacterVertices(jVertices, sizeof(jVertices));
	Gui::characters[74].ranges.push_back({ 0, 19 });
	Gui::characters[74].ranges.push_back({ 19, 4 });
	Gui::characters[74].width = 0.3247863247863248f;

	// k
	float kVertices[] = {
		// Triangle strip 0
		-1.0f, 0.8998778998778999f,
		-0.593952483801296f, 0.8998778998778999f,
		-1.0f, -1.0f,
		-0.593952483801296f, -1.0f,
		// Triangle strip 1
		-0.593952483801296f, -0.4297924297924298f,
		-0.593952483801296f, -0.21245421245421237f,
		-0.12526997840172782f, -0.20634920634920628f,
		0.36069114470842334f, 0.3638583638583639f,
		0.8660907127429807f, 0.3638583638583639f,
		// Triangle strip 2
		1.0f, -1.0f,
		0.4665226781857452f, -1.0f,
		-0.12526997840172782f, -0.20634920634920628f,
		-0.43412526997840173f, -0.3418803418803418f,
	};
	Gui::characters[75].vao = gui::Gui::loadCharacterVertices(kVertices, sizeof(kVertices));
	Gui::characters[75].ranges.push_back({ 0, 4 });
	Gui::characters[75].ranges.push_back({ 4, 5 });
	Gui::characters[75].ranges.push_back({ 9, 4 });
	Gui::characters[75].width = 0.5653235653235653f;

	// l
	float lVertices[] = {
		// Triangle strip 0
		-1.0f, 0.8998778998778999f,
		1.0f, 0.8998778998778999f,
		-1.0f, -1.0f,
		1.0f, -1.0f,
	};
	Gui::characters[76].vao = gui::Gui::loadCharacterVertices(lVertices, sizeof(lVertices));
	Gui::characters[76].ranges.push_back({ 0, 4 });
	Gui::characters[76].width = 0.11477411477411477f;

	// m
	float mVertices[] = {
		// Triangle strip 0
		-0.7417582417582418f, -1.0f,
		-1.0f, -1.0f,
		-0.7417582417582418f, 0.3638583638583639f,
		-1.0f, 0.3638583638583639f,
		// Triangle strip 1
		-0.7417582417582418f, 0.21245421245421248f,
		-0.7417582417582418f, 0.01831501831501836f,
		-0.5405219780219781f, 0.35225885225885223f,
		-0.5631868131868132f, 0.1367521367521367f,
		-0.3214285714285714f, 0.4017094017094017f,
		-0.3873626373626373f, 0.18315018315018317f,
		-0.0803571428571429f, 0.34676434676434675f,
		-0.25f, 0.15995115995115994f,
		0.07967032967032961f, 0.16605616605616602f,
		-0.17170329670329665f, 0.08791208791208793f,
		0.12362637362637363f, 0.0146520146520146f,
		-0.13736263736263732f, -0.03724053724053733f,
		0.12706043956043955f, -0.0347985347985349f,
		-0.1291208791208791f, -0.21123321123321115f,
		0.1291208791208791f, -0.10256410256410264f,
		-0.1291208791208791f, -1.0f,
		0.1291208791208791f, -1.0f,
		// Triangle strip 2
		0.07967032967032961f, 0.16605616605616602f,
		0.12362637362637363f, 0.0146520146520146f,
		0.3076923076923077f, 0.3418803418803419f,
		0.3125f, 0.13980463980463975f,
		0.5494505494505495f, 0.4017094017094017f,
		0.4835164835164836f, 0.18315018315018317f,
		0.7293956043956045f, 0.37423687423687424f,
		0.6208791208791209f, 0.15995115995115994f,
		0.8708791208791209f, 0.2857142857142857f,
		0.6991758241758241f, 0.08791208791208793f,
		0.9663461538461537f, 0.13064713064713063f,
		0.7335164835164836f, -0.03724053724053733f,
		1.0f, -0.10256410256410264f,
		0.7417582417582418f, -0.21123321123321115f,
		1.0f, -1.0f,
		0.7417582417582418f, -1.0f,
	};
	Gui::characters[77].vao = gui::Gui::loadCharacterVertices(mVertices, sizeof(mVertices));
	Gui::characters[77].ranges.push_back({ 0, 4 });
	Gui::characters[77].ranges.push_back({ 4, 17 });
	Gui::characters[77].ranges.push_back({ 21, 16 });
	Gui::characters[77].width = 0.8888888888888888f;

	// n
	float nVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.571753986332574f, -1.0f,
		-1.0f, 0.3638583638583639f,
		-0.571753986332574f, 0.3638583638583639f,
		// Triangle strip 1
		-0.571753986332574f, 0.01831501831501836f,
		-0.571753986332574f, 0.21245421245421248f,
		-0.2403189066059226f, 0.13736263736263732f,
		-0.193621867881549f, 0.35286935286935284f,
		0.08883826879271073f, 0.18315018315018317f,
		0.20045558086560367f, 0.4017094017094017f,
		0.3439635535307517f, 0.1581196581196581f,
		0.5079726651480638f, 0.37484737484737485f,
		0.48974943052391806f, 0.08180708180708185f,
		0.7881548974943053f, 0.2698412698412699f,
		0.5546697038724373f, -0.04822954822954828f,
		0.9498861047835991f, 0.10256410256410253f,
		0.571753986332574f, -0.22344322344322354f,
		1.0f, -0.11477411477411481f,
		0.571753986332574f, -1.0f,
		1.0f, -1.0f,
	};
	Gui::characters[78].vao = gui::Gui::loadCharacterVertices(nVertices, sizeof(nVertices));
	Gui::characters[78].ranges.push_back({ 0, 4 });
	Gui::characters[78].ranges.push_back({ 4, 16 });
	Gui::characters[78].width = 0.536019536019536f;

	// o
	float oVertices[] = {
		// Triangle strip 0
		-1.0f, -0.31868131868131866f,
		-0.6112224448897796f, -0.31868131868131866f,
		-0.9338677354709419f, -0.0219780219780219f,
		-0.5751503006012024f, -0.09523809523809534f,
		-0.7254509018036073f, 0.21245421245421248f,
		-0.4529058116232465f, 0.07448107448107444f,
		-0.4188376753507014f, 0.3504273504273504f,
		-0.23847695390781565f, 0.17704517704517708f,
		0.002004008016031955f, 0.4017094017094017f,
		0.002004008016031955f, 0.20390720390720396f,
		0.40280561122244496f, 0.3565323565323565f,
		0.2464929859719438f, 0.17582417582417587f,
		0.7274549098196392f, 0.2136752136752137f,
		0.4529058116232465f, 0.07448107448107444f,
		0.9218436873747495f, 0.004884004884004867f,
		0.5751503006012024f, -0.09523809523809534f,
		1.0f, -0.31868131868131866f,
		0.6112224448897796f, -0.31868131868131866f,
		0.9458917835671343f, -0.5934065934065933f,
		0.5771543086172344f, -0.5323565323565325f,
		0.7274549098196392f, -0.8510378510378511f,
		0.4529058116232465f, -0.7094017094017093f,
		0.4308617234468939f, -0.9853479853479854f,
		0.2585170340681362f, -0.8083028083028083f,
		0.002004008016031955f, -1.0378510378510377f,
		0.002004008016031955f, -0.84004884004884f,
		-0.4348697394789579f, -0.9841269841269842f,
		-0.27855711422845686f, -0.800976800976801f,
		-0.7334669338677355f, -0.8437118437118436f,
		-0.4529058116232465f, -0.7069597069597069f,
		-0.9398797595190381f, -0.6007326007326008f,
		-0.5851703406813626f, -0.5079365079365079f,
		-1.0f, -0.31868131868131866f,
		-0.6112224448897796f, -0.31868131868131866f,
	};
	Gui::characters[79].vao = gui::Gui::loadCharacterVertices(oVertices, sizeof(oVertices));
	Gui::characters[79].ranges.push_back({ 0, 34 });
	Gui::characters[79].width = 0.6092796092796092f;

	// p
	float pVertices[] = {
		// Triangle strip 0
		-1.0f, -1.503052503052503f,
		-0.5987193169690501f, -1.503052503052503f,
		-1.0f, 0.3638583638583639f,
		-0.5987193169690501f, 0.3638583638583639f,
		// Triangle strip 1
		-0.5987193169690501f, 0.221001221001221f,
		-0.5987193169690501f, 0.028083028083028094f,
		-0.26680896478121663f, 0.3498168498168498f,
		-0.2966915688367129f, 0.13980463980463975f,
		0.13127001067235855f, 0.4017094017094017f,
		0.033084311632870955f, 0.18315018315018317f,
		0.47065101387406627f, 0.3626373626373627f,
		0.2593383137673426f, 0.15873015873015872f,
		0.7716115261472785f, 0.21611721611721613f,
		0.45570971184631803f, 0.05494505494505497f,
		0.9402347918890075f, 0.0024420024420024333f,
		0.5538954108858059f, -0.10012210012210021f,
		1.0f, -0.28205128205128216f,
		0.5859124866595518f, -0.3076923076923077f,
		0.9423692636072571f, -0.5616605616605617f,
		0.551760939167556f, -0.5067155067155067f,
		0.7161152614727855f, -0.8241758241758241f,
		0.4130202774813234f, -0.6898656898656899f,
		0.3681963713980789f, -0.982905982905983f,
		0.17609391675560304f, -0.7948717948717949f,
		-0.005336179295624355f, -1.0268620268620268f,
		-0.07150480256136604f, -0.8205128205128205f,
		-0.31910352187833513f, -1.0036630036630036f,
		-0.3287086446104589f, -0.8046398046398047f,
		-0.5987193169690501f, -0.9316239316239316f,
		-0.5987193169690501f, -0.7448107448107448f,
	};
	Gui::characters[80].vao = gui::Gui::loadCharacterVertices(pVertices, sizeof(pVertices));
	Gui::characters[80].ranges.push_back({ 0, 4 });
	Gui::characters[80].ranges.push_back({ 4, 26 });
	Gui::characters[80].width = 0.572039072039072f;

	// q
	float qVertices[] = {
		// Triangle strip 0
		1.0f, -1.503052503052503f,
		0.5987193169690501f, -1.503052503052503f,
		1.0f, 0.3638583638583639f,
		0.5987193169690501f, 0.11843711843711846f,
		0.6243329775880471f, 0.3638583638583639f,
		0.5987193169690501f, 0.3052503052503053f,
		// Triangle strip 1
		0.5987193169690501f, 0.3052503052503053f,
		0.5987193169690501f, 0.11843711843711846f,
		0.32337246531483466f, 0.3772893772893773f,
		0.32764140875133396f, 0.1782661782661783f,
		0.005336179295624355f, 0.4017094017094017f,
		0.07150480256136604f, 0.19536019536019533f,
		-0.37673425827107787f, 0.35286935286935284f,
		-0.22091782283884742f, 0.15873015873015872f,
		-0.6926360725720384f, 0.2148962148962149f,
		-0.41515474919957307f, 0.0647130647130647f,
		-0.9156883671291356f, -0.011599511599511558f,
		-0.5432230522945571f, -0.09645909645909656f,
		-1.0f, -0.3223443223443223f,
		-0.5859124866595518f, -0.31135531135531136f,
		-0.9466382070437567f, -0.601953601953602f,
		-0.5560298826040555f, -0.5103785103785103f,
		-0.7588046958377801f, -0.8412698412698412f,
		-0.44930629669156885f, -0.6800976800976801f,
		-0.5026680896478122f, -0.971916971916972f,
		-0.27854855923159016f, -0.7753357753357752f,
		-0.112059765208111f, -1.0268620268620268f,
		-0.0245464247598719f, -0.8083028083028083f,
		0.25720384204909275f, -0.9847374847374848f,
		0.3041622198505869f, -0.7667887667887667f,
		0.5987193169690501f, -0.8510378510378511f,
		0.5987193169690501f, -0.6581196581196582f,
	};
	Gui::characters[81].vao = gui::Gui::loadCharacterVertices(qVertices, sizeof(qVertices));
	Gui::characters[81].ranges.push_back({ 0, 6 });
	Gui::characters[81].ranges.push_back({ 6, 26 });
	Gui::characters[81].width = 0.572039072039072f;

	// r
	float rVertices[] = {
		// Triangle strip 0
		-1.0f, -1.0f,
		-0.3648648648648649f, -1.0f,
		-1.0f, 0.3638583638583639f,
		-0.3648648648648649f, 0.3638583638583639f,
		// Triangle strip 1
		-0.3648648648648649f, -0.031746031746031855f,
		-0.3648648648648649f, 0.16117216117216115f,
		-0.17229729729729726f, 0.026862026862026878f,
		-0.07770270270270274f, 0.24542124542124544f,
		0.11486486486486491f, 0.08791208791208793f,
		0.2432432432432432f, 0.31868131868131866f,
		0.347972972972973f, 0.11599511599511603f,
		0.4695945945945945f, 0.3504273504273504f,
		0.625f, 0.1282051282051282f,
		0.7432432432432432f, 0.3638583638583639f,
		0.8158783783783783f, 0.12637362637362637f,
		0.8902027027027026f, 0.3620268620268621f,
		0.9662162162162162f, 0.11721611721611724f,
		1.0f, 0.3565323565323565f,
		1.0f, 0.11721611721611724f,
	};
	Gui::characters[82].vao = gui::Gui::loadCharacterVertices(rVertices, sizeof(rVertices));
	Gui::characters[82].ranges.push_back({ 0, 4 });
	Gui::characters[82].ranges.push_back({ 4, 15 });
	Gui::characters[82].width = 0.3614163614163614f;

	// s
	float sVertices[] = {
		// Triangle strip 0
		-1.0f, -0.6605616605616607f,
		-1.0f, -0.9181929181929183f,
		-0.9752475247524752f, -0.6605616605616607f,
		-0.8391089108910891f, -0.9548229548229548f,
		-0.8353960396039604f, -0.7118437118437118f,
		-0.6014851485148515f, -0.9963369963369964f,
		-0.6212871287128713f, -0.7704517704517704f,
		-0.3886138613861386f, -1.0207570207570207f,
		-0.36014851485148514f, -0.818070818070818f,
		-0.08168316831683164f, -1.0329670329670328f,
		-0.0643564356435643f, -0.8388278388278387f,
		0.3873762376237624f, -1.0012210012210012f,
		0.1732673267326732f, -0.826007326007326f,
		0.7227722772277227f, -0.9084249084249085f,
		0.3613861386138615f, -0.7936507936507937f,
		0.9294554455445545f, -0.7735042735042734f,
		0.4863861386138615f, -0.7338217338217339f,
		1.0f, -0.6068376068376069f,
		0.5247524752475248f, -0.6385836385836385f,
		0.9702970297029703f, -0.4847374847374848f,
		0.43440594059405946f, -0.5152625152625152f,
		0.8440594059405941f, -0.36752136752136755f,
		0.11386138613861396f, -0.44566544566544564f,
		0.636138613861386f, -0.28815628815628824f,
		-0.1188118811881188f, -0.4200244200244201f,
		0.38366336633663356f, -0.2417582417582418f,
		-0.38366336633663367f, -0.38827838827838823f,
		0.11509900990099009f, -0.21184371184371176f,
		-0.6608910891089108f, -0.3296703296703296f,
		-0.11633663366336633f, -0.1855921855921856f,
		-0.844059405940594f, -0.24786324786324787f,
		-0.41831683168316836f, -0.11599511599511603f,
		-0.9455445544554455f, -0.15506715506715496f,
		-0.4900990099009901f, -0.06227106227106227f,
		-0.9876237623762376f, -0.019536019536019467f,
		-0.5123762376237624f, 0.01098901098901095f,
		-0.9133663366336634f, 0.15262515262515264f,
		-0.47029702970297027f, 0.09645909645909645f,
		-0.7054455445544554f, 0.28083028083028083f,
		-0.35396039603960394f, 0.15506715506715507f,
		-0.3688118811881188f, 0.36874236874236876f,
		-0.19059405940594054f, 0.18925518925518925f,
		0.044554455445544594f, 0.39682539682539686f,
		0.034653465346534684f, 0.20268620268620263f,
		0.5074257425742574f, 0.36874236874236876f,
		0.4764851485148516f, 0.16239316239316237f,
		0.8985148514851484f, 0.297924297924298f,
		0.8737623762376239f, 0.05250305250305254f,
		0.8985148514851484f, 0.05250305250305254f,
	};
	Gui::characters[83].vao = gui::Gui::loadCharacterVertices(sVertices, sizeof(sVertices));
	Gui::characters[83].ranges.push_back({ 0, 49 });
	Gui::characters[83].width = 0.4932844932844933f;

	// t
	float tVertices[] = {
		// Triangle strip 0
		-0.6157337367624811f, 0.7557997557997558f,
		-0.04689863842662634f, 0.7557997557997558f,
		-0.6157337367624811f, -0.5824175824175823f,
		-0.04689863842662634f, -0.47496947496947506f,
		-0.5552193645990923f, -0.7753357753357752f,
		-0.03782148260211804f, -0.6349206349206349f,
		-0.35552193645990926f, -0.9194139194139195f,
		0.03177004538577921f, -0.73992673992674f,
		-0.03479576399394857f, -1.0012210012210012f,
		0.19818456883509827f, -0.8040293040293041f,
		0.3706505295007565f, -1.0268620268620268f,
		0.5098335854765508f, -0.8253968253968254f,
		0.6747352496217851f, -1.0164835164835164f,
		0.7791225416036309f, -0.8089133089133089f,
		1.0f, -0.9877899877899878f,
		0.966717095310136f, -0.7814407814407816f,
		1.0f, -0.7814407814407816f,
		// Triangle strip 1
		-1.0f, 0.3638583638583639f,
		-1.0f, 0.17338217338217343f,
		1.0f, 0.3638583638583639f,
		1.0f, 0.17338217338217343f,
	};
	Gui::characters[84].vao = gui::Gui::loadCharacterVertices(tVertices, sizeof(tVertices));
	Gui::characters[84].ranges.push_back({ 0, 17 });
	Gui::characters[84].ranges.push_back({ 17, 4 });
	Gui::characters[84].width = 0.40354090354090355f;

	// u
	float uVertices[] = {
		// Triangle strip 0
		-1.0f, 0.3638583638583639f,
		-0.571753986332574f, 0.3638583638583639f,
		-1.0f, -0.5213675213675213f,
		-0.571753986332574f, -0.4126984126984128f,
		-0.9396355353075171f, -0.7557997557997558f,
		-0.5569476082004556f, -0.5927960927960927f,
		-0.7699316628701595f, -0.9157509157509158f,
		-0.48974943052391795f, -0.7179487179487178f,
		-0.5136674259681093f, -1.0085470085470085f,
		-0.3473804100227791f, -0.7948717948717949f,
		-0.20045558086560367f, -1.0378510378510377f,
		-0.08883826879271073f, -0.8192918192918193f,
		0.19589977220956722f, -0.9896214896214897f,
		0.24601366742596809f, -0.7716727716727716f,
		0.571753986332574f, -0.8485958485958487f,
		0.571753986332574f, -0.6544566544566544f,
		0.571753986332574f, -1.0f,
		1.0f, -1.0f,
		0.571753986332574f, 0.3638583638583639f,
		1.0f, 0.3638583638583639f,
	};
	Gui::characters[85].vao = gui::Gui::loadCharacterVertices(uVertices, sizeof(uVertices));
	Gui::characters[85].ranges.push_back({ 0, 20 });
	Gui::characters[85].width = 0.536019536019536f;

	// v
	float vVertices[] = {
		// Triangle strip 0
		-1.0f, 0.3638583638583639f,
		-0.5972222222222222f, 0.3638583638583639f,
		-0.17063492063492058f, -1.0f,
		0.009920634920634885f, -0.6886446886446886f,
		0.16468253968253976f, -1.0f,
		0.6111111111111112f, 0.3638583638583639f,
		1.0f, 0.3638583638583639f,
	};
	Gui::characters[86].vao = gui::Gui::loadCharacterVertices(vVertices, sizeof(vVertices));
	Gui::characters[86].ranges.push_back({ 0, 7 });
	Gui::characters[86].width = 0.6153846153846154f;

	// w
	float wVertices[] = {
		// Triangle strip 0
		-1.0f, 0.3638583638583639f,
		-0.7315068493150685f, 0.3638583638583639f,
		-0.6082191780821917f, -1.0f,
		-0.4616438356164384f, -0.6923076923076923f,
		-0.37123287671232874f, -1.0f,
		-0.09863013698630141f, 0.3638583638583639f,
		0.0f, 0.05128205128205132f,
		0.11369863013698622f, 0.3638583638583639f,
		0.3739726027397261f, -1.0f,
		0.48630136986301364f, -0.6923076923076923f,
		0.6123287671232878f, -1.0f,
		0.7410958904109588f, 0.3638583638583639f,
		1.0f, 0.3638583638583639f,
	};
	Gui::characters[87].vao = gui::Gui::loadCharacterVertices(wVertices, sizeof(wVertices));
	Gui::characters[87].ranges.push_back({ 0, 13 });
	Gui::characters[87].width = 0.8913308913308914f;

	// x
	float xVertices[] = {
		// Triangle strip 0
		-0.9919517102615694f, 0.3638583638583639f,
		-0.5271629778672032f, 0.3638583638583639f,
		0.5352112676056338f, -1.0f,
		1.0f, -1.0f,
		// Triangle strip 1
		-1.0f, -1.0f,
		-0.5714285714285714f, -1.0f,
		0.5694164989939638f, 0.3638583638583639f,
		1.0f, 0.3638583638583639f,
	};
	Gui::characters[88].vao = gui::Gui::loadCharacterVertices(xVertices, sizeof(xVertices));
	Gui::characters[88].ranges.push_back({ 0, 4 });
	Gui::characters[88].ranges.push_back({ 4, 4 });
	Gui::characters[88].width = 0.6068376068376068f;

	// y
	float yVertices[] = {
		// Triangle strip 0
		-1.0f, 0.3638583638583639f,
		-0.5972222222222222f, 0.3638583638583639f,
		-0.19444444444444442f, -0.9340659340659341f,
		0.007936507936507908f, -0.6459096459096458f,
		-0.5912698412698413f, -1.503052503052503f,
		-0.19246031746031744f, -1.503052503052503f,
		0.6111111111111112f, 0.3638583638583639f,
		1.0f, 0.3638583638583639f,
	};
	Gui::characters[89].vao = gui::Gui::loadCharacterVertices(yVertices, sizeof(yVertices));
	Gui::characters[89].ranges.push_back({ 0, 8 });
	Gui::characters[89].width = 0.6153846153846154f;

	// z
	float zVertices[] = {
		// Triangle strip 0
		-0.9415347137637028f, 0.3638583638583639f,
		-0.9415347137637028f, 0.17460317460317465f,
		0.9732034104750305f, 0.3638583638583639f,
		0.42265529841656524f, 0.17460317460317465f,
		0.9732034104750305f, 0.2002442002442002f,
		-1.0f, -0.8302808302808302f,
		-0.4567600487210719f, -0.8083028083028083f,
		-1.0f, -1.0f,
		1.0f, -0.8083028083028083f,
		1.0f, -1.0f,
	};
	Gui::characters[90].vao = gui::Gui::loadCharacterVertices(zVertices, sizeof(zVertices));
	Gui::characters[90].ranges.push_back({ 0, 10 });
	Gui::characters[90].width = 0.5012210012210012f;

	// braceleft
	float braceleftVertices[] = {
		// Triangle strip 0
		1.0f, 0.8998778998778999f,
		1.0f, 0.7313797313797314f,
		0.7191283292978208f, 0.8998778998778999f,
		0.8062953995157385f, 0.7313797313797314f,
		0.32445520581113807f, 0.8681318681318682f,
		0.5593220338983051f, 0.7167277167277167f,
		0.041162227602905554f, 0.7802197802197802f,
		0.38014527845036317f, 0.6666666666666667f,
		-0.13559322033898302f, 0.6422466422466422f,
		0.2651331719128329f, 0.5653235653235653f,
		-0.20581113801452788f, 0.4273504273504274f,
		0.2276029055690072f, 0.4065934065934066f,
		-0.20581113801452788f, 0.24542124542124544f,
		0.2276029055690072f, 0.1929181929181929f,
		-0.23728813559322037f, 0.07570207570207566f,
		0.18159806295399505f, 0.024420024420024444f,
		-0.35835351089588374f, -0.07081807081807079f,
		0.04600484261501214f, -0.10378510378510386f,
		-0.5920096852300243f, -0.1630036630036631f,
		-0.16222760290556903f, -0.20207570207570202f,
		-0.9491525423728814f, -0.19413919413919412f,
		-0.4285714285714286f, -0.27472527472527464f,
		-1.0f, -0.19413919413919412f,
		-1.0f, -0.3846153846153846f,
		-0.4285714285714286f, -0.27472527472527464f,
		-0.9491525423728814f, -0.3846153846153846f,
		-0.4285714285714286f, -0.30402930402930406f,
		-0.5920096852300243f, -0.41575091575091583f,
		-0.16343825665859568f, -0.3766788766788767f,
		-0.35835351089588374f, -0.5079365079365079f,
		0.04600484261501214f, -0.47496947496947506f,
		-0.23728813559322037f, -0.6544566544566544f,
		0.18159806295399505f, -0.6031746031746033f,
		-0.20581113801452788f, -0.8241758241758241f,
		0.2276029055690072f, -0.7716727716727716f,
		-0.20581113801452788f, -1.006105006105006f,
		0.2276029055690072f, -0.9853479853479854f,
		-0.1404358353510896f, -1.214896214896215f,
		0.2651331719128329f, -1.144078144078144f,
		0.041162227602905554f, -1.358974358974359f,
		0.38014527845036317f, -1.2454212454212454f,
		0.3171912832929782f, -1.4456654456654459f,
		0.5581113801452784f, -1.2954822954822953f,
		0.7191283292978208f, -1.4786324786324787f,
		0.8062953995157385f, -1.31013431013431f,
		1.0f, -1.4786324786324787f,
		1.0f, -1.31013431013431f,
	};
	Gui::characters[91].vao = gui::Gui::loadCharacterVertices(braceleftVertices, sizeof(braceleftVertices));
	Gui::characters[91].ranges.push_back({ 0, 47 });
	Gui::characters[91].width = 0.5042735042735043f;

	// bar
	float barVertices[] = {
		// Triangle strip 0
		-1.0f, 0.8998778998778999f,
		1.0f, 0.8998778998778999f,
		-1.0f, -1.4786324786324787f,
		1.0f, -1.4786324786324787f,
	};
	Gui::characters[92].vao = gui::Gui::loadCharacterVertices(barVertices, sizeof(barVertices));
	Gui::characters[92].ranges.push_back({ 0, 4 });
	Gui::characters[92].width = 0.10195360195360195f;

	// braceright
	float bracerightVertices[] = {
		// Triangle strip 0
		-1.0f, 0.8998778998778999f,
		-1.0f, 0.7313797313797314f,
		-0.7191283292978208f, 0.8998778998778999f,
		-0.8062953995157385f, 0.7313797313797314f,
		-0.38983050847457623f, 0.8791208791208791f,
		-0.5593220338983051f, 0.7167277167277167f,
		-0.041162227602905554f, 0.7802197802197802f,
		-0.38014527845036317f, 0.6666666666666667f,
		0.14406779661016955f, 0.6312576312576312f,
		-0.2651331719128329f, 0.5653235653235653f,
		0.20581113801452777f, 0.4273504273504274f,
		-0.2276029055690073f, 0.4065934065934066f,
		0.20581113801452777f, 0.24542124542124544f,
		-0.2276029055690073f, 0.1929181929181929f,
		0.23728813559322037f, 0.07570207570207566f,
		-0.18159806295399517f, 0.024420024420024444f,
		0.35835351089588374f, -0.07081807081807079f,
		-0.04600484261501214f, -0.10378510378510386f,
		0.5920096852300243f, -0.1630036630036631f,
		0.16222760290556892f, -0.20207570207570202f,
		0.9491525423728813f, -0.19413919413919412f,
		0.4285714285714286f, -0.27472527472527464f,
		1.0f, -0.19413919413919412f,
		1.0f, -0.3846153846153846f,
		0.4285714285714286f, -0.27472527472527464f,
		0.9491525423728813f, -0.3846153846153846f,
		0.4285714285714286f, -0.30402930402930406f,
		0.5920096852300243f, -0.41575091575091583f,
		0.16222760290556892f, -0.3766788766788767f,
		0.35835351089588374f, -0.5079365079365079f,
		-0.04600484261501214f, -0.47496947496947506f,
		0.23728813559322037f, -0.6544566544566544f,
		-0.18159806295399517f, -0.6031746031746033f,
		0.20581113801452777f, -0.8241758241758241f,
		-0.2276029055690073f, -0.7716727716727716f,
		0.20581113801452777f, -1.006105006105006f,
		-0.2276029055690073f, -0.9853479853479854f,
		0.15012106537530268f, -1.2002442002442004f,
		-0.2651331719128329f, -1.144078144078144f,
		-0.041162227602905554f, -1.358974358974359f,
		-0.38014527845036317f, -1.2454212454212454f,
		-0.35351089588377727f, -1.451770451770452f,
		-0.5593220338983051f, -1.2954822954822953f,
		-0.7191283292978208f, -1.4786324786324787f,
		-0.8062953995157385f, -1.31013431013431f,
		-1.0f, -1.4786324786324787f,
		-1.0f, -1.31013431013431f,
	};
	Gui::characters[93].vao = gui::Gui::loadCharacterVertices(bracerightVertices, sizeof(bracerightVertices));
	Gui::characters[93].ranges.push_back({ 0, 47 });
	Gui::characters[93].width = 0.5042735042735043f;

	// asciitilde
	float asciitildeVertices[] = {
		// Triangle strip 0
		-1.0f, -0.5177045177045176f,
		-0.7250409165302782f, -0.5177045177045176f,
		-0.9648117839607201f, -0.27472527472527464f,
		-0.7062193126022913f, -0.33943833943833934f,
		-0.8690671031096563f, -0.07081807081807079f,
		-0.6579378068739771f, -0.1929181929181929f,
		-0.6955810147299508f, 0.07631257631257626f,
		-0.5679214402618658f, -0.09706959706959717f,
		-0.4402618657937807f, 0.13064713064713063f,
		-0.43207855973813425f, -0.0647130647130647f,
		-0.2675941080196399f, 0.11111111111111116f,
		-0.3240589198036007f, -0.08547008547008539f,
		-0.1358428805237316f, 0.061050061050061055f,
		-0.2324058919803601f, -0.14041514041514036f,
		-0.030278232405892003f, -0.008547008547008517f,
		-0.14893617021276595f, -0.21367521367521358f,
		0.06382978723404253f, -0.09035409035409026f,
		-0.06219312602291327f, -0.29548229548229554f,
		0.14975450081833053f, -0.170940170940171f,
		0.03109656301145658f, -0.37484737484737485f,
		0.23404255319148937f, -0.24542124542124544f,
		0.1407528641571194f, -0.44810744810744807f,
		0.32978723404255317f, -0.3015873015873016f,
		0.2725040916530279f, -0.49755799755799757f,
		0.43207855973813425f, -0.3211233211233211f,
		0.4402618657937807f, -0.5164835164835164f,
		0.5703764320785598f, -0.286935286935287f,
		0.7004909983633387f, -0.46031746031746024f,
		0.6579378068739772f, -0.19413919413919412f,
		0.867430441898527f, -0.315018315018315f,
		0.7062193126022913f, -0.050671550671550714f,
		0.9656301145662847f, -0.10805860805860812f,
		0.7250409165302782f, 0.13186813186813184f,
		1.0f, 0.13186813186813184f,
	};
	Gui::characters[94].vao = gui::Gui::loadCharacterVertices(asciitildeVertices, sizeof(asciitildeVertices));
	Gui::characters[94].ranges.push_back({ 0, 34 });
	Gui::characters[94].width = 0.746031746031746f;
}
unsigned int gui::Gui::loadCharacterVertices(float vertices[], int size) {
	unsigned int vao;
	glGenVertexArrays(1, &vao);
	glBindVertexArray(vao);

	unsigned int vbo;
	glGenBuffers(1, &vbo);
	glBindBuffer(GL_ARRAY_BUFFER, vbo);
	glBufferData(GL_ARRAY_BUFFER, size, vertices, GL_STATIC_DRAW);

	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);

	return vao;
}
void gui::Gui::setInitialised(bool initialised) {
	guiIsInitialised = initialised;
}

gui::OGLWindow* gui::Gui::mainWindow;
Shader* gui::Gui::shader;
unsigned int gui::Gui::quadVAO;
gui::FocusManager* gui::Gui::focusManager;
gui::KeyManager* gui::Gui::keyManager;
gui::MouseManager* gui::Gui::mouseManager;
gui::ResizeManager* gui::Gui::resizeManager;
std::vector<gui::Character> gui::Gui::characters;

// Character
void gui::Character::draw(glm::mat4 transformationMatrix, glm::vec4 color) {
	Gui::shader->use();
	Gui::shader->setBool("hasTexture", false);
	Gui::shader->setVec4("color", color);
	Gui::shader->setMat4("transformation", transformationMatrix);

	glBindVertexArray(this->vao);

	for (auto it = this->ranges.begin(); it != this->ranges.end(); ++it) {
		glDrawArrays(GL_TRIANGLE_STRIP, (*it).index, (*it).length);
	}
}

// Boundary
bool gui::Boundary::contains(float x, float y) {
	return (this->left <= x && x <= this->right
		&& this->bottom <= y && y <= this->top);
};
void gui::Boundary::print(bool endLine) {
	std::cout << "Top: " << top << ", right: " << right << ", bottom: " << bottom << ", left: " << left;
	if (endLine)
		std::cout << std::endl;
}

// Element
gui::Element::Element() {
	this->preferredSide = Side::CENTER;
	this->transformationMatrix = glm::mat4(1.0);
}
void gui::Element::updateBoundary(Boundary boundary) {
	this->boundary = boundary;
	this->transformationMatrix = Gui::getTransformationMatrix(this->boundary);
}
void gui::Element::setPreferredDimension(int x, int y, int width, int height) {
	this->preferredDimension.x = x;
	this->preferredDimension.y = y;
	this->preferredDimension.width = width;
	this->preferredDimension.height = height;
}

// FocusListener
gui::FocusListener::FocusListener() {
	this->nextElementsFocusListener = this;
	this->previousElementsFocusListener = this;
}
void gui::FocusListener::onFocus() {}
void gui::FocusListener::onDefocus() {}
void gui::FocusListener::setPreviousElement(FocusListener* previousElementsFocusListener) {
	this->previousElementsFocusListener = previousElementsFocusListener;

	// Next element after previous now goes after this one
	this->nextElementsFocusListener = previousElementsFocusListener->nextElementsFocusListener;
	
	// The next element after previous is this one
	previousElementsFocusListener->nextElementsFocusListener = this;
}

// MouseListener
void gui::MouseListener::onMouseEnter() {}
void gui::MouseListener::onMouseLeave() {}
void gui::MouseListener::onMousePress(int button, int mods) {}
void gui::MouseListener::onMouseRelease(int button, int mods) {}
void gui::MouseListener::onMouseScroll(double horizontalScroll, double verticalScroll) {}

// FocusManager
gui::FocusManager::FocusManager() {
	this->focusedElementsListener = nullptr;
}
void gui::FocusManager::requestFocus(FocusListener* listener) {
	if (this->focusedElementsListener != nullptr)
		this->focusedElementsListener->onDefocus();

	this->focusedElementsListener = listener;
	this->focusedElementsListener->onFocus();
}

// KeyManager
void gui::KeyManager::characterCallback(GLFWwindow* window, unsigned int codepoint) {
	char c = (char) codepoint;
	Gui::keyManager->onCharacterPress(c);
}
void gui::KeyManager::keyCallback(GLFWwindow* window, int key, int scanCode, int action, int mods) {
	Gui::keyManager->onKeyPress(key, mods, action);
}
void gui::KeyManager::registerKeyListener(KeyListener* keyListener) {
	this->keyListeners.push_back(keyListener);
}
void gui::KeyManager::onCharacterPress(char c) {
	for (auto it = this->keyListeners.begin(); it != this->keyListeners.end(); ++it) {
		(*it)->onCharacterPress(c);
	}
}
void gui::KeyManager::onKeyPress(int keycode, int mods, int action) {
	for (auto it = this->keyListeners.begin(); it != this->keyListeners.end(); ++it) {
		(*it)->onKeyPress(keycode, mods, action);
	}
}

// MouseManager
void gui::MouseManager::mousePositionCallback(GLFWwindow* window, double xPos, double yPos) {
	float newMouseX = 2.0f * (float)xPos / Gui::mainWindow->getWindowWidth() - 1.0f;
	float newMouseY = 2.0f * (float)yPos / Gui::mainWindow->getWindowHeight() - 1.0f;
	
	Gui::mouseManager->onMouseMove(newMouseX, -newMouseY);
}
void gui::MouseManager::mouseButtonCallback(GLFWwindow* window, int button, int action, int mods) {
	Gui::mouseManager->onMouseClick(button, action, mods);
}
void gui::MouseManager::mouseScrollCallback(GLFWwindow* window, double xOffset, double yOffset) {
	Gui::mouseManager->onMouseScroll(xOffset, yOffset);
}

gui::MouseManager::MouseManager() {
	this->mouseX = 0.0f;
	this->mouseY = 0.0f;
}
void gui::MouseManager::onMouseMove(float newMouseX, float newMouseY) {
	for (auto it = this->mouseListeners.begin(); it != this->mouseListeners.end(); ++it) {
		MouseListener* listener = (*it);

		bool previouslyHovered = listener->getBoundary().contains(this->mouseX, this->mouseY);
		bool currentlyHoveres = listener->getBoundary().contains(newMouseX, newMouseY);

		
		if (previouslyHovered != currentlyHoveres) {
			// Something needs to change
			if (currentlyHoveres) {
				listener->onMouseEnter();
			} else {
				listener->onMouseLeave();
			}
		}
	}

	this->mouseX = newMouseX;
	this->mouseY = newMouseY;
}
void gui::MouseManager::onMouseClick(int button, int action, int mods) {
	for (auto it = this->mouseListeners.begin(); it != this->mouseListeners.end(); ++it) {
		if ((*it)->getBoundary().contains(this->mouseX, this->mouseY)) {
			if (action == GLFW_PRESS)
				(*it)->onMousePress(button, mods);
			else if (action == GLFW_RELEASE)
				(*it)->onMouseRelease(button, mods);
		}
	}
}
void gui::MouseManager::onMouseScroll(double horizontalScroll, double verticalScroll) {

}
void gui::MouseManager::registerMouseListener(MouseListener* listener) {
	this->mouseListeners.push_back(listener);
}
float gui::MouseManager::getMouseX() {
	return this->mouseX;
}
float gui::MouseManager::getMouseY() {
	return this->mouseY;
}

// ResizeManager
void gui::ResizeManager::resizeCallback(GLFWwindow* glfwWindow, int width, int height) {
	Gui::mainWindow->updateWindowSize(width, height);
}

// BorderLayout
void gui::BorderLayout::updateBoundaries(std::vector<Element*>* elements, Boundary boundary) {
	Element* centerElement = nullptr;
	Element* northElement = nullptr;
	Element* eastElement = nullptr;
	Element* southElement = nullptr;
	Element* westElement = nullptr;

	// First, determine which elements are to be displayed, if not, hide elements
	for (auto it = elements->begin(); it != elements->end(); ++it) {
		switch ((*it)->preferredSide) {
			case Side::CENTER:
				if (centerElement == nullptr) centerElement = *it;
				else (*it)->updateBoundary({ 0.0f, 0.0f, 0.0f, 0.0f });
				break;
			case Side::NORTH:
				if (northElement == nullptr) northElement = *it;
				else (*it)->updateBoundary({ 0.0f, 0.0f, 0.0f, 0.0f });
				break;
			case Side::EAST:
				if (eastElement == nullptr) eastElement = *it;
				else (*it)->updateBoundary({ 0.0f, 0.0f, 0.0f, 0.0f });
				break;
			case Side::SOUTH:
				if (southElement == nullptr) southElement = *it;
				else (*it)->updateBoundary({ 0.0f, 0.0f, 0.0f, 0.0f });
				break;
			case Side::WEST:
				if (westElement == nullptr) westElement = *it;
				else (*it)->updateBoundary({ 0.0f, 0.0f, 0.0f, 0.0f });
				break;
		}
	}

	int windowWidth = Gui::mainWindow->getWindowWidth();
	int windowHeight = Gui::mainWindow->getWindowHeight();

	// Calculate border positions
	float northBorder = (northElement == nullptr) ? boundary.top : boundary.top - 2 * ((float)northElement->preferredDimension.height / (float)windowHeight);
	float eastBorder = (eastElement == nullptr) ? boundary.right : boundary.right - 2 * ((float)eastElement->preferredDimension.width / (float)windowWidth);
	float southBorder = (southElement == nullptr) ? boundary.bottom : boundary.bottom + 2 * ((float)southElement->preferredDimension.height / (float)windowHeight);
	float westBorder = (westElement == nullptr) ? boundary.left : boundary.left + 2 * ((float)westElement->preferredDimension.width / (float)windowWidth);

	// Apply boundary changes
	if (centerElement != nullptr)
		centerElement->updateBoundary({ northBorder, eastBorder, southBorder, westBorder });
	if (northElement != nullptr)
		northElement->updateBoundary({ boundary.top, boundary.right, northBorder, boundary.left });
	if (eastElement != nullptr)
		eastElement->updateBoundary({ northBorder, boundary.right, southBorder, eastBorder });
	if (southElement != nullptr)
		southElement->updateBoundary({ southBorder, boundary.right, boundary.bottom, boundary.left });
	if (westElement != nullptr)
		westElement->updateBoundary({ northBorder, westBorder, southBorder, boundary.left });
}

// Absolute Layout
void gui::AbsoluteLayout::updateBoundaries(std::vector<Element*>* elements, Boundary boundary) {
	int windowWidth = Gui::mainWindow->getWindowWidth();
	int windowHeight = Gui::mainWindow->getWindowHeight();
	
	for (auto it = elements->begin(); it != elements->end(); ++it) {
		
		float left = boundary.left + 2 * ((float)(*it)->preferredDimension.x / (float)windowWidth);
		float top = boundary.top - 2 * ((float)(*it)->preferredDimension.y / (float)windowHeight);

		float right = left + 2 * ((float)(*it)->preferredDimension.width / (float)windowWidth);
		float bottom = top - 2 * ((float)(*it)->preferredDimension.height / (float)windowHeight);

		(*it)->updateBoundary({ top, right, bottom, left });
	}
}

// Container
gui::Container::Container() {
	this->layout = nullptr;
}
void gui::Container::addElement(Element* element) {
	this->children.push_back(element);
	//this->updateBoundary(this->boundary);
	this->layout->updateBoundaries(&this->children, this->boundary);
}
void gui::Container::setLayout(Layout* layout) {
	this->layout = layout;
	this->updateBoundary(this->boundary);
}

// Panel
gui::Panel::Panel() {
	this->opaque = false;
	this->hasTexture = false;
	this->textureID = 0;
	this->backgroundColor = glm::vec4(0.0, 0.0, 0.0, 1.0);
}
void gui::Panel::draw() {
	if (this->opaque) {

		Gui::shader->use();
		Gui::shader->setMat4("transformation", this->transformationMatrix);
		Gui::shader->setBool("hasTexture", this->hasTexture);
		Gui::shader->setBool("isTextureColored", false);

		if (this->hasTexture) {
			// Use texture
			glBindTexture(GL_TEXTURE_2D, this->textureID);
		} else {
			// Use color
			Gui::shader->setVec4("color", this->backgroundColor);
		}

		glBindVertexArray(Gui::quadVAO);
		glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
	}

	// Draw children
	for (auto it = this->children.begin(); it != this->children.end(); ++it) {
		(*it)->draw();
	}
}
void gui::Panel::updateBoundary(Boundary boundary) {
	this->boundary = boundary;
	this->transformationMatrix = Gui::getTransformationMatrix(this->boundary);

	if (this->layout != nullptr)
		this->layout->updateBoundaries(&this->children, this->boundary);
}
void gui::Panel::setOpaque(bool opaque) {
	this->opaque = opaque;
}
void gui::Panel::setBackgroundColor(glm::vec4 color) {
	this->backgroundColor = color;
}
void gui::Panel::setBackgroundImage(unsigned int textureID) {
	this->hasTexture = true;
	this->textureID = textureID;
}

// TextLine
gui::TextLine::TextLine(std::string text) {
	this->fontSize = 30;
	this->charDistance = 0.1f;
	this->color = glm::vec4(0.0, 0.0, 0.0, 1.0);
	this->text = text;

	this->screenTextLeft = 0.0f;
	this->screenTextTop = 0.0f;
}
gui::TextLine::TextLine(std::string text, int fontSize, float charDistance, glm::vec4 color) {
	this->fontSize = fontSize;
	this->charDistance = charDistance;
	this->color = color;
	this->text = text;

	this->screenTextLeft = 0.0f;
	this->screenTextTop = 0.0f;
}
void gui::TextLine::drawCharacters() {
	
	int windowWidth = Gui::mainWindow->getWindowWidth();
	int windowHeight = Gui::mainWindow->getWindowHeight();

	float screenLeft = this->screenTextLeft;
	float screenTop = this->screenTextTop;

	float charScreenHeight = ((float) this->fontSize / (float) windowHeight) * 2.0f;
	float screenBottom = screenTop - charScreenHeight;

	glEnable(GL_MULTISAMPLE);
	for (char& cchar : this->text) {
		gui::Character c = Gui::getCharacter(cchar);

		float charPixelWidth = c.width * (float) this->fontSize;

		float charScreenWidth = ((float)charPixelWidth / (float)windowWidth) * 2.0f;

		float screenRight = screenLeft + charScreenWidth;
		Boundary b = {screenTop, screenRight, screenBottom, screenLeft};
		glm::mat4 transformationMatrix = Gui::getTransformationMatrix(b);

		c.draw(transformationMatrix, this->color);

		float charPixelDistance = this->charDistance * this->fontSize;
		float charScreenDistance = ((float)charPixelDistance / (float)windowWidth) * 2.0f;
		screenLeft = screenRight + charScreenDistance;
	}
	glDisable(GL_MULTISAMPLE);
}
void gui::TextLine::setColor(glm::vec4 color) {
	this->color = color;
}
void gui::TextLine::setFontSize(int fontSize) {
	this->fontSize = fontSize;
}
int gui::TextLine::getFontSize() {
	return this->fontSize;
}
void gui::TextLine::setTextPosition(float screenLeft, float screenTop) {
	this->screenTextLeft = screenLeft;
	this->screenTextTop = screenTop;
}
int gui::TextLine::getInsertPositionAtMouse() {
	float mouseX = Gui::mouseManager->getMouseX();
	int windowWidth = Gui::mainWindow->getWindowWidth();

	int closestInsertPosition = 0;
	float closestInsertCoordinate = this->screenTextLeft;

	for (char& cchar : this->text) {
		gui::Character c = Gui::getCharacter(cchar);
		float charPixelWidth = c.width * this->getFontSize();
		float charScreenWidth = (charPixelWidth / (float)windowWidth) * 2.0f;
		float coordinateAtRightOfChar = closestInsertCoordinate + charScreenWidth;
		int positionAtRightOfChar = closestInsertPosition + 1;

		if ((mouseX - closestInsertCoordinate) > (coordinateAtRightOfChar - mouseX)) {
			// Mouse is closer to right of char than to left of char
			float charPixelDistance = this->getCharDistance() * this->getFontSize();
			float charScreenDistance = (charPixelDistance / (float)windowWidth) * 2.0f;

			closestInsertCoordinate = coordinateAtRightOfChar + charScreenDistance;
			closestInsertPosition = positionAtRightOfChar;
		} else {
			// Position is getting away from mouse
			break;
		}
	}

	return closestInsertPosition;
}
void gui::TextLine::drawInsertLine(int position) {
	float windowWidth = (float) Gui::mainWindow->getWindowWidth();
	float windowHeight = (float) Gui::mainWindow->getWindowHeight();

	float characterWidthSum = 0.0f;
	for (int i = 0; i < position; ++i) {
		char currentChar = this->text[i];
		gui::Character c = Gui::getCharacter(currentChar);
		characterWidthSum += c.width;
	}

	float characterWidthSumPixels = characterWidthSum * (float)this->getFontSize();
	float characterWidthSumScreen = (characterWidthSumPixels / windowWidth) * 2.0f;

	float charPixelDistance = this->getCharDistance() * this->getFontSize();
	float charScreenDistance = ((float)charPixelDistance / windowWidth) * 2.0f * (position - 1);

	float barPixelWidth = 0.1f * this->getFontSize();
	float barScreenWidth = (barPixelWidth / windowHeight) * 2.0f;
	float charScreenHeight = ((float)this->getFontSize() / windowHeight) * 2.0f;

	float screenLeft = this->screenTextLeft + characterWidthSumScreen + charScreenDistance;
	float screenTop = this->screenTextTop;
	float screenBottom = screenTop - charScreenHeight;
	float screenRight = screenLeft + barScreenWidth;

	Boundary barBoundary = { screenTop, screenRight, screenBottom, screenLeft };
	glm::mat4 mat = Gui::getTransformationMatrix(barBoundary);

	Gui::shader->use();
	Gui::shader->setBool("hasTexture", false);
	Gui::shader->setVec4("color", this->getColor());
	Gui::shader->setMat4("transformation", mat);
	glBindVertexArray(Gui::quadVAO);
	glEnable(GL_MULTISAMPLE);
	glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
	glDisable(GL_MULTISAMPLE);
}
float gui::TextLine::getCharDistance() {
	return this->charDistance;
}
glm::vec4 gui::TextLine::getColor() {
	return this->color;
}
 
// Label
gui::Label::Label(std::string text) : gui::TextLine(text) {
	this->opaque = false;
	this->usesTexture = false;
	this->backgroundColor = glm::vec4(0.0, 0.0, 0.0, 1.0);
	this->backgroundImage = 0;

	this->textOffsetLeft = 0;
	this->textOffsetTop = 0;
	this->updateTextPosition();
}
void gui::Label::draw() {

	// Draw background
	if (this->opaque) {
		Gui::shader->use();
		Gui::shader->setMat4("transformation", this->transformationMatrix);
		Gui::shader->setBool("hasTexture", this->usesTexture);
		if (this->usesTexture)
			glBindTexture(GL_TEXTURE_2D, this->backgroundImage);
		else
			Gui::shader->setVec4("color", this->backgroundColor);

		glBindVertexArray(Gui::quadVAO);
		glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
	}

	// Draw text
	this->drawCharacters();
}
void gui::Label::updateBoundary(Boundary boundary) {
	boundary.print(true);
	this->boundary = boundary;
	this->transformationMatrix = Gui::getTransformationMatrix(this->boundary);

	this->updateTextPosition();
}
void gui::Label::setTextOffset(int left, int top) {
	this->textOffsetLeft = left;
	this->textOffsetTop = top;

	this->updateTextPosition();
}
void gui::Label::updateTextPosition() {
	float windowWidth = (float)Gui::mainWindow->getWindowWidth();
	float windowHeight = (float)Gui::mainWindow->getWindowHeight();

	float screenOffsetWidth = (float) this->textOffsetLeft / windowWidth * 2.0f;
	float screenOffsetHeight = (float) this->textOffsetTop / windowHeight * 2.0f;

	float newLeft = this->boundary.left + screenOffsetWidth;
	float newTop = this->boundary.top - screenOffsetHeight;

	this->setTextPosition(newLeft, newTop);
}
void gui::Label::setOpaque(bool opaque) {
	this->opaque = opaque;
}
void gui::Label::setBackgroundColor(glm::vec4 color) {
	this->backgroundColor = color;
	this->usesTexture = false;
}
void gui::Label::setBackgroundImage(unsigned int image) {
	this->backgroundImage = image;
	this->usesTexture = true;
}

// TextInput
gui::TextInput::TextInput() : gui::TextLine("") {
	this->insertPosition = 0;
	this->previousInsertUpdate = 0.0;
	this->characterLimit = 8;

	this->isFocused = false;
	this->isHovered = false;

	this->hasBackgroundImage = false;

	this->backgroundColorDefault = glm::vec4(0.6, 0.6, 0.6, 1.0);
	this->backgroundColorHovered = glm::vec4(0.8, 0.8, 0.8, 1.0);
	this->backgroundColorFocused = glm::vec4(1.0, 1.0, 1.0, 1.0);

	this->backgroundImageDefault = 0;
	this->backgroundImageHovered = 0;
	this->backgroundImageFocused = 0;

	this->textOffsetLeft = 0;
	this->textOffsetTop = 0;

	Gui::keyManager->registerKeyListener(this);
	Gui::mouseManager->registerMouseListener(this);
}
void gui::TextInput::draw() {
	Gui::shader->use();
	glBindVertexArray(Gui::quadVAO);

	Gui::shader->setMat4("transformation", this->transformationMatrix);
	Gui::shader->setBool("hasTexture", this->hasBackgroundImage);

	if (this->hasBackgroundImage) {
		// Draw image as background
		if (this->isFocused)
			glBindTexture(GL_TEXTURE_2D, this->backgroundImageFocused);
		else if (this->isHovered)
			glBindTexture(GL_TEXTURE_2D, this->backgroundImageHovered);
		else
			glBindTexture(GL_TEXTURE_2D, this->backgroundImageDefault);
	} else {
		// Draw background with single color
		if (this->isFocused)
			Gui::shader->setVec4("color", this->backgroundColorFocused);
		else if (this->isHovered)
			Gui::shader->setVec4("color", this->backgroundColorHovered);
		else
			Gui::shader->setVec4("color", this->backgroundColorDefault);
	}

	glDrawArrays(GL_TRIANGLE_FAN, 0, 4);

	this->drawCharacters();

	if (gui::TextInput::shouldInsertLineShow())
		this->drawInsertLine(this->insertPosition);
}
void gui::TextInput::updateBoundary(Boundary boundary) {
	this->boundary = boundary;
	this->transformationMatrix = Gui::getTransformationMatrix(this->boundary);

	this->updateTextPosition();
}
void gui::TextInput::updateTextPosition() {
	float windowWidth = (float)Gui::mainWindow->getWindowWidth();
	float windowHeight = (float)Gui::mainWindow->getWindowHeight();

	float textOffsetWidth = (float)this->textOffsetLeft / windowWidth * 2.0f;
	float textOffsetHeight = (float)this->textOffsetTop / windowHeight * 2.0f;

	float newLeft = this->boundary.left + textOffsetWidth;
	float newTop = this->boundary.top - textOffsetHeight;

	this->setTextPosition(newLeft, newTop);
}
void gui::TextInput::onFocus() {
	this->isFocused = true;
	std::cout << "Focused" << std::endl;
}
void gui::TextInput::onDefocus() {
	this->isFocused = false;
	std::cout << "Defocused" << std::endl;
}
void gui::TextInput::onMouseEnter() {
	this->isHovered = true;
}
void gui::TextInput::onMouseLeave() {
	this->isHovered = false;
}
void gui::TextInput::onMousePress(int button, int mods) {
	if (!this->isFocused) {
		Gui::focusManager->requestFocus(this);
	} else {
		this->setInsertPosition(this->getInsertPositionAtMouse());
	}
}
gui::Boundary gui::TextInput::getBoundary() {
	return this->boundary;
}
void gui::TextInput::onCharacterPress(char c) {
	if (!this->isFocused)
		return;

	this->addCharacter(c);
}
void gui::TextInput::onKeyPress(int keyCode, int mods, int action) {
	if (!this->isFocused)
		return;

	if (action == GLFW_PRESS) {
		switch (keyCode) {
			case GLFW_KEY_BACKSPACE:
				this->removeCharacter();
				break;
			case GLFW_KEY_DELETE:
				this->removeNextCharacter();
				break;
			case GLFW_KEY_ENTER:
				break;
			case GLFW_KEY_UP:
				std::cout << "Pressed up at input!" << std::endl;
				break;
			case GLFW_KEY_DOWN:
				std::cout << "Pressed up at input!" << std::endl;
				break;
			case GLFW_KEY_LEFT:
				this->moveInsertPosition(-1);
				break;
			case GLFW_KEY_RIGHT:
				this->moveInsertPosition(1);
				break;
			case GLFW_KEY_TAB:
				std::cout << "Pressed tab at input!" << std::endl;
				break;
		}
	}
}
void gui::TextInput::setText(std::string newText) {
	this->text = newText.substr(0, this->characterLimit);
	if (this->insertPosition > this->text.length()) {
		this->insertPosition = (int)this->text.length();
	}
}
void gui::TextInput::setTextOffset(int left, int top) {
	this->textOffsetLeft = left;
	this->textOffsetTop = top;

	this->updateTextPosition();
}

void gui::TextInput::addCharacter(char c) {
	if (this->text.length() < this->characterLimit) {
		this->text.insert(this->insertPosition, 1, c);
		this->setInsertPosition(this->insertPosition + 1);
	}
}
void gui::TextInput::removeCharacter() {
	if (this->insertPosition > 0) {
		int removeIndex = this->insertPosition - 1;
		this->text.erase(removeIndex, 1);
		this->setInsertPosition(this->insertPosition - 1);
	}
}
void gui::TextInput::removeNextCharacter() {
	if (this->insertPosition < this->text.length()) {
		this->moveInsertPosition(1);
		this->removeCharacter();
	}
}
void gui::TextInput::setInsertPosition(int position) {
	if (position > 0) {
		if (position > this->text.length()) {
			this->insertPosition = (int)this->text.length();
		} else {
			this->insertPosition = position;
		}
	} else {
		this->insertPosition = 0;
	}
	onInsertPositionUpdate();
}
void gui::TextInput::moveInsertPosition(int jumpSize) {
	this->setInsertPosition(this->insertPosition + jumpSize);
}
void gui::TextInput::onInsertPositionUpdate() {
	this->previousInsertUpdate = glfwGetTime();
}
bool gui::TextInput::shouldInsertLineShow() {
	double time = glfwGetTime() - this->previousInsertUpdate;
	return this->isFocused && std::cos(time * 6.0f) > 0;
}
void gui::TextInput::setBackgroundImage(unsigned int defaultTexture, unsigned int hoverTexture, unsigned int focusTexture) {
	this->backgroundImageDefault = defaultTexture;
	this->backgroundImageHovered = hoverTexture;
	this->backgroundImageFocused = focusTexture;

	this->hasBackgroundImage = true;
}

// DoubleInput
gui::DoubleInput::DoubleInput() {
	this->value = 0.0;
	this->maxValue = 999.999;
	this->minValue = -999.999;
}
void gui::DoubleInput::onCharacterPress(char c) {
	if (!this->isFocused)
		return;

	if (isNumber(c) || c == '-') {
		this->addCharacter(c);
	} else if (c == '.' || c == ',') {
		this->addCharacter(DECIMAL_SEPERATOR);
	}
}
void gui::DoubleInput::onKeyPress(int keyCode, int mods, int action) {
	if (!this->isFocused)
		return;

	if (action == GLFW_PRESS) {
		switch (keyCode) {
			case GLFW_KEY_BACKSPACE:
				this->removeCharacter();
				break;
			case GLFW_KEY_DELETE:
				this->removeNextCharacter();
				break;
			case GLFW_KEY_ENTER:
				this->updateValueFromText();
				break;
			case GLFW_KEY_UP:
				switch (mods) {
					case (GLFW_MOD_SHIFT):
						this->increase(0.1);
						break;
					case (GLFW_MOD_CONTROL):
						this->increase(0.01);
						break;
					case (GLFW_MOD_CONTROL | GLFW_MOD_SHIFT):
						this->increase(0.001);
						break;
					default:
						this->increase(1.0);
						break;
				}
				break;
			case GLFW_KEY_DOWN:
				switch (mods) {
					case (GLFW_MOD_SHIFT):
						this->increase(-0.1);
						break;
					case (GLFW_MOD_CONTROL):
						this->increase(-0.01);
						break;
					case (GLFW_MOD_CONTROL | GLFW_MOD_SHIFT):
						this->increase(-0.001);
						break;
					default:
						this->increase(-1.0);
						break;
				}
				break;
			case GLFW_KEY_LEFT:
				this->moveInsertPosition(-1);
				break;
			case GLFW_KEY_RIGHT:
				this->moveInsertPosition(1);
				break;
			case GLFW_KEY_TAB:
				std::cout << "Pressed tab at input!" << std::endl;
				break;
		}
	}
}
void gui::DoubleInput::updateValueFromText() {
	double valueFromText = gui::DoubleInput::stringToDouble(this->text);
	double valueWithinBounds = this->getValueWithinBounds(valueFromText);

	std::string correspondingText = gui::DoubleInput::doubleToString(valueWithinBounds);
	
	this->setText(correspondingText);
	this->value = valueWithinBounds;
}
void gui::DoubleInput::updateTextFromValue() {
	std::string textFromValue = gui::DoubleInput::doubleToString(this->value);
	this->setText(textFromValue);
}
void gui::DoubleInput::increase(double addition) {
	updateValueFromText();

	double newValue = this->value + addition;
	double valueWithinBounds = this->getValueWithinBounds(newValue);
	this->value = valueWithinBounds;

	this->updateTextFromValue();
	this->setInsertPosition((int)this->text.length());
}
void gui::DoubleInput::onFocus() {
	this->isFocused = true;
	this->setInsertPosition((int)this->text.length());
}
void gui::DoubleInput::onDefocus() {
	this->isFocused = false;
	this->updateValueFromText();
}
double gui::DoubleInput::getValueWithinBounds(double value) {
	double lowerThanMax = std::min(value, this->maxValue);
	double betweenBounds = std::max(lowerThanMax, this->minValue);
	return betweenBounds;
}

bool gui::DoubleInput::isNumber(char c) {
	return std::isdigit(c);
}
bool gui::DoubleInput::isLetter(char c) {
	return std::isalpha(c);
}
double gui::DoubleInput::stringToDouble(std::string s) {
	if (s.empty())
		return 0.0f;

	double f = std::stod(s);
	return f;
}
std::string gui::DoubleInput::doubleToString(double f) {
	std::string s = std::to_string(f);
	std::string sh = removeLastZeroes(roundString(s));
	return sh;
}
std::string gui::DoubleInput::roundString(std::string s) {
	std::string::size_type dotPosition = s.find('.');

	if (dotPosition != std::string::npos && (dotPosition + 4) < s.length()) {
		char lastDigit = s[dotPosition + 4];
		if (isCharRoundable(lastDigit)) {
			return roundStringUp(s.substr(0, dotPosition + 4));
		} else {
			return s.substr(0, dotPosition + 4);
		}
	}
	return s;
}
std::string gui::DoubleInput::roundStringUp(std::string s) {
	for (int index = (int)s.length() - 1; index >= 0; --index) {
		char current = s[index];
		if (current == '9') {
			// Set current to zero and increase next digit
			s[index] = '0';
		} else if (current == '.' || current == '-') {
			// Just increase next digit
		} else {
			// Increase current and return
			s[index] = (char)((int)current + 1);
			return s;
		}
	}
	// If all digits were a 9, add a 1 in front of the new string (9.99 -> 10.00)
	if (s[0] == '-') {
		s.insert(1, "1");
	} else if (s[0] == '0') {
		s.insert(0, "1");
	}
	return s;
}
std::string gui::DoubleInput::removeLastZeroes(std::string s) {
	std::string::size_type dotPosition = s.find('.');

	if (dotPosition == std::string::npos) {
		// No dot and no decimal digits, so just return original
		return s;
	} else {
		// Always use at least digit before dot
		int lastUsefulDigitIndex = (int)dotPosition - 1;

		// Iterate through all digits after dot
		for (int index = (int)s.length() - 1; index > dotPosition; --index) {
			char digit = s[index];
			if (digit != '0') {
				// Useful digit. Set last useful digit and stop loop
				lastUsefulDigitIndex = index;
				break;
			}
		}
		int finalLastUsefulDigit = lastUsefulDigitIndex + 1;
		return s.substr(0, finalLastUsefulDigit);
	}
}
bool gui::DoubleInput::isCharRoundable(char c) {
	return (int)c >= gui::DoubleInput::roundMinChar && (int)c <= gui::DoubleInput::roundMaxChar;
}

// Button
gui::Button::Button(unsigned int texture, unsigned int textureHover, unsigned int texturePress) {
	this->isHovered = false;
	this->isPressed = false;

	this->texture = texture;
	this->textureHover = textureHover;
	this->texturePress = texturePress;
	Gui::mouseManager->registerMouseListener(this);
}
void gui::Button::draw() {
	Gui::shader->use();
	Gui::shader->setMat4("transformation", this->transformationMatrix);
	Gui::shader->setBool("hasTexture", true);

	if (this->isPressed) {
		// Draw pressed button
		glBindTexture(GL_TEXTURE_2D, this->texturePress);
	} else if (this->isHovered) {
		// Draw hovered button
		glBindTexture(GL_TEXTURE_2D, this->textureHover);
	} else {
		// Draw normal button
		glBindTexture(GL_TEXTURE_2D, this->texture);
	}

	glBindVertexArray(Gui::quadVAO);
	glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
}
void gui::Button::updateBoundary(Boundary boundary) {
	this->boundary = boundary;
	this->transformationMatrix = Gui::getTransformationMatrix(this->boundary);
}

void gui::Button::onMouseEnter() {
	std::cout << "Entered!" << std::endl;
	this->isHovered = true;
}
void gui::Button::onMouseLeave() {
	this->isHovered = false;
	this->isPressed = false;
}
void gui::Button::onMousePress(int button, int mods) {
	this->isPressed = true;
	std::cout << "Button is pressed" << std::endl;
}
void gui::Button::onMouseRelease(int button, int mods) {
	this->isPressed = false;
}
gui::Boundary gui::Button::getBoundary() {
	return this->boundary;
}

// IncrementButton
gui::IncrementButton::IncrementButton(unsigned int texture, unsigned int textureHover, unsigned int texturePress) : gui::Button(texture, textureHover, texturePress) {
	this->listener = nullptr;
	this->increaseValue = 1.0;
	this->shiftIncreaseValue = 0.1;
	this->controlIncreaseValue = 0.01;
	this->shiftControlIncreaseValue = 0.001;
}
void gui::IncrementButton::onMouseRelease(int button, int mods) {
	if (this->listener != nullptr) {
		switch (mods) {
			case GLFW_MOD_SHIFT:
				this->listener->increase(this->shiftIncreaseValue);
				break;
			case GLFW_MOD_CONTROL:
				this->listener->increase(this->controlIncreaseValue);
				break;
			case GLFW_MOD_SHIFT | GLFW_MOD_CONTROL:
				this->listener->increase(this->shiftControlIncreaseValue);
				break;
			default:
				this->listener->increase(this->increaseValue);
				break;
		}
	}
	
	this->isPressed = false;
}
void gui::IncrementButton::setIncrementListener(gui::IncrementListener* listener, double value, double shiftValue, double controlValue, double shiftControlValue) {
	this->listener = listener;

	this->increaseValue = value;
	this->shiftIncreaseValue = shiftValue;
	this->controlIncreaseValue = controlValue;
	this->shiftControlIncreaseValue = shiftControlValue;
}

// OGLWindow
gui::OGLWindow::OGLWindow(int windowWidth, int windowHeight) : Panel() {
	if (Gui::isInitialised())
		throw AlreadyInitializedException();

	std::cout << "4. Initialising OGLWindow" << std::endl;

	this->glfwWindow = glfwCreateWindow(windowWidth, windowHeight, "OGLWindow", NULL, NULL);
	if (this->glfwWindow == NULL)
	{
		glfwTerminate();
		throw WindowCreationException();
	}
	glfwMakeContextCurrent(this->glfwWindow);
	glfwSwapInterval(1);	// Limit framerate to monitor

	// Mouse Callbacks
	glfwSetCursorPosCallback(glfwWindow, &gui::MouseManager::mousePositionCallback);
	glfwSetMouseButtonCallback(glfwWindow, &gui::MouseManager::mouseButtonCallback);
	glfwSetScrollCallback(glfwWindow, &gui::MouseManager::mouseScrollCallback);
	// Key Callbacks
	glfwSetKeyCallback(glfwWindow, &gui::KeyManager::keyCallback);
	glfwSetCharCallback(glfwWindow, &gui::KeyManager::characterCallback);
	// Resize Callback
	glfwSetFramebufferSizeCallback(glfwWindow, &gui::ResizeManager::resizeCallback);

	this->windowWidth = windowWidth;
	this->windowHeight = windowHeight;
	this->boundary = screenBoundary;
}
void gui::OGLWindow::draw() {
	//glEnable(GL_DEPTH_TEST);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// Allow transparency
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	for (auto it = this->children.begin(); it != this->children.end(); ++it) {
		(*it)->draw();
	}

	//glEnable(GL_DEPTH_TEST);
	glfwSwapBuffers(this->glfwWindow);
	glfwPollEvents();
}
bool gui::OGLWindow::shoudClose() {
	return glfwWindowShouldClose(this->glfwWindow);
}
void gui::OGLWindow::setMinimalWindowSize(int width, int height) {
	glfwSetWindowSizeLimits(this->glfwWindow, width, height, GLFW_DONT_CARE, GLFW_DONT_CARE);
}
void gui::OGLWindow::setBackgroundColor(glm::vec4 color) {
	glClearColor(color.x, color.y, color.z, color.w);
}
void gui::OGLWindow::setTitle(std::string title) {
	glfwSetWindowTitle(this->glfwWindow, title.c_str());
}
void gui::OGLWindow::updateWindowSize(int width, int height) {
	glViewport(0, 0, width, height);
	this->windowWidth = width;
	this->windowHeight = height;
	this->updateBoundary(screenBoundary);
}
int gui::OGLWindow::getWindowWidth() {
	return this->windowWidth;
}
int gui::OGLWindow::getWindowHeight() {
	return this->windowHeight;
}

// Exceptions
NotInitializedException::NotInitializedException() : std::runtime_error("Not yet initialized") {};
AlreadyInitializedException::AlreadyInitializedException() : std::runtime_error("Failed to initialize gui") {};
WindowCreationException::WindowCreationException() : std::runtime_error("Failed to create GLFW window") {};
GladLoadingException::GladLoadingException() : std::runtime_error("Failed to initialize GLAD") {};